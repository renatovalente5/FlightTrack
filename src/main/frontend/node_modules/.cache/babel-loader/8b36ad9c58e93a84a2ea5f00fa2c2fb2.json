{"ast":null,"code":"/*! Hammer.JS - v2.0.7 - 2016-04-22\r\n * http://hammerjs.github.io/\r\n *\r\n * Copyright (c) 2016 Jorik Tangelder;\r\n * Licensed under the MIT license */\n(function (window, document, exportName, undefined) {\n  'use strict';\n\n  var VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\n  var TEST_ELEMENT = document.createElement('div');\n  var TYPE_FUNCTION = 'function';\n  var round = Math.round;\n  var abs = Math.abs;\n  var now = Date.now;\n  /**\r\n   * set a timeout with a given scope\r\n   * @param {Function} fn\r\n   * @param {Number} timeout\r\n   * @param {Object} context\r\n   * @returns {number}\r\n   */\n\n  function setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n  }\n  /**\r\n   * if the argument is an array, we want to execute the fn on each entry\r\n   * if it aint an array we don't want to do a thing.\r\n   * this is used by all the methods that accept a single and array argument.\r\n   * @param {*|Array} arg\r\n   * @param {String} fn\r\n   * @param {Object} [context]\r\n   * @returns {Boolean}\r\n   */\n\n\n  function invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n      each(arg, context[fn], context);\n      return true;\n    }\n\n    return false;\n  }\n  /**\r\n   * walk objects and arrays\r\n   * @param {Object} obj\r\n   * @param {Function} iterator\r\n   * @param {Object} context\r\n   */\n\n\n  function each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n      return;\n    }\n\n    if (obj.forEach) {\n      obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n      i = 0;\n\n      while (i < obj.length) {\n        iterator.call(context, obj[i], i, obj);\n        i++;\n      }\n    } else {\n      for (i in obj) {\n        obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n      }\n    }\n  }\n  /**\r\n   * wrap a method with a deprecation warning and stack trace\r\n   * @param {Function} method\r\n   * @param {String} name\r\n   * @param {String} message\r\n   * @returns {Function} A new function wrapping the supplied method.\r\n   */\n\n\n  function deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function () {\n      var e = new Error('get-stack-trace');\n      var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '').replace(/^\\s+at\\s+/gm, '').replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n      var log = window.console && (window.console.warn || window.console.log);\n\n      if (log) {\n        log.call(window.console, deprecationMessage, stack);\n      }\n\n      return method.apply(this, arguments);\n    };\n  }\n  /**\r\n   * extend object.\r\n   * means that properties in dest will be overwritten by the ones in src.\r\n   * @param {Object} target\r\n   * @param {...Object} objects_to_assign\r\n   * @returns {Object} target\r\n   */\n\n\n  var assign;\n\n  if (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n      if (target === undefined || target === null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      var output = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var source = arguments[index];\n\n        if (source !== undefined && source !== null) {\n          for (var nextKey in source) {\n            if (source.hasOwnProperty(nextKey)) {\n              output[nextKey] = source[nextKey];\n            }\n          }\n        }\n      }\n\n      return output;\n    };\n  } else {\n    assign = Object.assign;\n  }\n  /**\r\n   * extend object.\r\n   * means that properties in dest will be overwritten by the ones in src.\r\n   * @param {Object} dest\r\n   * @param {Object} src\r\n   * @param {Boolean} [merge=false]\r\n   * @returns {Object} dest\r\n   */\n\n\n  var extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n\n    while (i < keys.length) {\n      if (!merge || merge && dest[keys[i]] === undefined) {\n        dest[keys[i]] = src[keys[i]];\n      }\n\n      i++;\n    }\n\n    return dest;\n  }, 'extend', 'Use `assign`.');\n  /**\r\n   * merge the values from src in the dest.\r\n   * means that properties that exist in dest will not be overwritten by src\r\n   * @param {Object} dest\r\n   * @param {Object} src\r\n   * @returns {Object} dest\r\n   */\n\n  var merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n  }, 'merge', 'Use `assign`.');\n  /**\r\n   * simple class inheritance\r\n   * @param {Function} child\r\n   * @param {Function} base\r\n   * @param {Object} [properties]\r\n   */\n\n  function inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n      assign(childP, properties);\n    }\n  }\n  /**\r\n   * simple function bind\r\n   * @param {Function} fn\r\n   * @param {Object} context\r\n   * @returns {Function}\r\n   */\n\n\n  function bindFn(fn, context) {\n    return function boundFn() {\n      return fn.apply(context, arguments);\n    };\n  }\n  /**\r\n   * let a boolean value also be a function that must return a boolean\r\n   * this first item in args will be used as the context\r\n   * @param {Boolean|Function} val\r\n   * @param {Array} [args]\r\n   * @returns {Boolean}\r\n   */\n\n\n  function boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n      return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n\n    return val;\n  }\n  /**\r\n   * use the val2 when val1 is undefined\r\n   * @param {*} val1\r\n   * @param {*} val2\r\n   * @returns {*}\r\n   */\n\n\n  function ifUndefined(val1, val2) {\n    return val1 === undefined ? val2 : val1;\n  }\n  /**\r\n   * addEventListener with multiple events at once\r\n   * @param {EventTarget} target\r\n   * @param {String} types\r\n   * @param {Function} handler\r\n   */\n\n\n  function addEventListeners(target, types, handler) {\n    each(splitStr(types), function (type) {\n      target.addEventListener(type, handler, false);\n    });\n  }\n  /**\r\n   * removeEventListener with multiple events at once\r\n   * @param {EventTarget} target\r\n   * @param {String} types\r\n   * @param {Function} handler\r\n   */\n\n\n  function removeEventListeners(target, types, handler) {\n    each(splitStr(types), function (type) {\n      target.removeEventListener(type, handler, false);\n    });\n  }\n  /**\r\n   * find if a node is in the given parent\r\n   * @method hasParent\r\n   * @param {HTMLElement} node\r\n   * @param {HTMLElement} parent\r\n   * @return {Boolean} found\r\n   */\n\n\n  function hasParent(node, parent) {\n    while (node) {\n      if (node == parent) {\n        return true;\n      }\n\n      node = node.parentNode;\n    }\n\n    return false;\n  }\n  /**\r\n   * small indexOf wrapper\r\n   * @param {String} str\r\n   * @param {String} find\r\n   * @returns {Boolean} found\r\n   */\n\n\n  function inStr(str, find) {\n    return str.indexOf(find) > -1;\n  }\n  /**\r\n   * split string on whitespace\r\n   * @param {String} str\r\n   * @returns {Array} words\r\n   */\n\n\n  function splitStr(str) {\n    return str.trim().split(/\\s+/g);\n  }\n  /**\r\n   * find if a array contains the object using indexOf or a simple polyFill\r\n   * @param {Array} src\r\n   * @param {String} find\r\n   * @param {String} [findByKey]\r\n   * @return {Boolean|Number} false when not found, or the index\r\n   */\n\n\n  function inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n      return src.indexOf(find);\n    } else {\n      var i = 0;\n\n      while (i < src.length) {\n        if (findByKey && src[i][findByKey] == find || !findByKey && src[i] === find) {\n          return i;\n        }\n\n        i++;\n      }\n\n      return -1;\n    }\n  }\n  /**\r\n   * convert array-like objects to real arrays\r\n   * @param {Object} obj\r\n   * @returns {Array}\r\n   */\n\n\n  function toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n  }\n  /**\r\n   * unique array with objects based on a key (like 'id') or just by the array's value\r\n   * @param {Array} src [{id:1},{id:2},{id:1}]\r\n   * @param {String} [key]\r\n   * @param {Boolean} [sort=False]\r\n   * @returns {Array} [{id:1},{id:2}]\r\n   */\n\n\n  function uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n      var val = key ? src[i][key] : src[i];\n\n      if (inArray(values, val) < 0) {\n        results.push(src[i]);\n      }\n\n      values[i] = val;\n      i++;\n    }\n\n    if (sort) {\n      if (!key) {\n        results = results.sort();\n      } else {\n        results = results.sort(function sortUniqueArray(a, b) {\n          return a[key] > b[key];\n        });\n      }\n    }\n\n    return results;\n  }\n  /**\r\n   * get the prefixed property\r\n   * @param {Object} obj\r\n   * @param {String} property\r\n   * @returns {String|Undefined} prefixed\r\n   */\n\n\n  function prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n    var i = 0;\n\n    while (i < VENDOR_PREFIXES.length) {\n      prefix = VENDOR_PREFIXES[i];\n      prop = prefix ? prefix + camelProp : property;\n\n      if (prop in obj) {\n        return prop;\n      }\n\n      i++;\n    }\n\n    return undefined;\n  }\n  /**\r\n   * get a unique id\r\n   * @returns {number} uniqueId\r\n   */\n\n\n  var _uniqueId = 1;\n\n  function uniqueId() {\n    return _uniqueId++;\n  }\n  /**\r\n   * get the window object of an element\r\n   * @param {HTMLElement} element\r\n   * @returns {DocumentView|Window}\r\n   */\n\n\n  function getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return doc.defaultView || doc.parentWindow || window;\n  }\n\n  var MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n  var SUPPORT_TOUCH = ('ontouchstart' in window);\n  var SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\n  var SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n  var INPUT_TYPE_TOUCH = 'touch';\n  var INPUT_TYPE_PEN = 'pen';\n  var INPUT_TYPE_MOUSE = 'mouse';\n  var INPUT_TYPE_KINECT = 'kinect';\n  var COMPUTE_INTERVAL = 25;\n  var INPUT_START = 1;\n  var INPUT_MOVE = 2;\n  var INPUT_END = 4;\n  var INPUT_CANCEL = 8;\n  var DIRECTION_NONE = 1;\n  var DIRECTION_LEFT = 2;\n  var DIRECTION_RIGHT = 4;\n  var DIRECTION_UP = 8;\n  var DIRECTION_DOWN = 16;\n  var DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\n  var DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\n  var DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n  var PROPS_XY = ['x', 'y'];\n  var PROPS_CLIENT_XY = ['clientX', 'clientY'];\n  /**\r\n   * create new input type manager\r\n   * @param {Manager} manager\r\n   * @param {Function} callback\r\n   * @returns {Input}\r\n   * @constructor\r\n   */\n\n  function Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget; // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n\n    this.domHandler = function (ev) {\n      if (boolOrFn(manager.options.enable, [manager])) {\n        self.handler(ev);\n      }\n    };\n\n    this.init();\n  }\n\n  Input.prototype = {\n    /**\r\n     * should handle the inputEvent data and trigger the callback\r\n     * @virtual\r\n     */\n    handler: function () {},\n\n    /**\r\n     * bind the events\r\n     */\n    init: function () {\n      this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n      this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n      this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\r\n     * unbind the events\r\n     */\n    destroy: function () {\n      this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n      this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n      this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n  };\n  /**\r\n   * create new input type manager\r\n   * called by the Manager constructor\r\n   * @param {Hammer} manager\r\n   * @returns {Input}\r\n   */\n\n  function createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n      Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n      Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n      Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n      Type = MouseInput;\n    } else {\n      Type = TouchMouseInput;\n    }\n\n    return new Type(manager, inputHandler);\n  }\n  /**\r\n   * handle input events\r\n   * @param {Manager} manager\r\n   * @param {String} eventType\r\n   * @param {Object} input\r\n   */\n\n\n  function inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = eventType & INPUT_START && pointersLen - changedPointersLen === 0;\n    var isFinal = eventType & (INPUT_END | INPUT_CANCEL) && pointersLen - changedPointersLen === 0;\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n      manager.session = {};\n    } // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n\n\n    input.eventType = eventType; // compute scale, rotation etc\n\n    computeInputData(manager, input); // emit secret event\n\n    manager.emit('hammer.input', input);\n    manager.recognize(input);\n    manager.session.prevInput = input;\n  }\n  /**\r\n   * extend the data with some usable properties like scale, rotate, velocity etc\r\n   * @param {Object} manager\r\n   * @param {Object} input\r\n   */\n\n\n  function computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length; // store the first input to calculate the distance and direction\n\n    if (!session.firstInput) {\n      session.firstInput = simpleCloneInputData(input);\n    } // to compute scale and rotation we need to store the multiple touches\n\n\n    if (pointersLength > 1 && !session.firstMultiple) {\n      session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n      session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = abs(overallVelocity.x) > abs(overallVelocity.y) ? overallVelocity.x : overallVelocity.y;\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n    input.maxPointers = !session.prevInput ? input.pointers.length : input.pointers.length > session.prevInput.maxPointers ? input.pointers.length : session.prevInput.maxPointers;\n    computeIntervalInputData(session, input); // find the correct target\n\n    var target = manager.element;\n\n    if (hasParent(input.srcEvent.target, target)) {\n      target = input.srcEvent.target;\n    }\n\n    input.target = target;\n  }\n\n  function computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n      prevDelta = session.prevDelta = {\n        x: prevInput.deltaX || 0,\n        y: prevInput.deltaY || 0\n      };\n      offset = session.offsetDelta = {\n        x: center.x,\n        y: center.y\n      };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n  }\n  /**\r\n   * velocity is calculated every x ms\r\n   * @param {Object} session\r\n   * @param {Object} input\r\n   */\n\n\n  function computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity,\n        velocityX,\n        velocityY,\n        direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n      var deltaX = input.deltaX - last.deltaX;\n      var deltaY = input.deltaY - last.deltaY;\n      var v = getVelocity(deltaTime, deltaX, deltaY);\n      velocityX = v.x;\n      velocityY = v.y;\n      velocity = abs(v.x) > abs(v.y) ? v.x : v.y;\n      direction = getDirection(deltaX, deltaY);\n      session.lastInterval = input;\n    } else {\n      // use latest velocity info if it doesn't overtake a minimum period\n      velocity = last.velocity;\n      velocityX = last.velocityX;\n      velocityY = last.velocityY;\n      direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n  }\n  /**\r\n   * create a simple clone from the input used for storage of firstInput and firstMultiple\r\n   * @param {Object} input\r\n   * @returns {Object} clonedInputData\r\n   */\n\n\n  function simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n\n    while (i < input.pointers.length) {\n      pointers[i] = {\n        clientX: round(input.pointers[i].clientX),\n        clientY: round(input.pointers[i].clientY)\n      };\n      i++;\n    }\n\n    return {\n      timeStamp: now(),\n      pointers: pointers,\n      center: getCenter(pointers),\n      deltaX: input.deltaX,\n      deltaY: input.deltaY\n    };\n  }\n  /**\r\n   * get the center of all the pointers\r\n   * @param {Array} pointers\r\n   * @return {Object} center contains `x` and `y` properties\r\n   */\n\n\n  function getCenter(pointers) {\n    var pointersLength = pointers.length; // no need to loop when only one touch\n\n    if (pointersLength === 1) {\n      return {\n        x: round(pointers[0].clientX),\n        y: round(pointers[0].clientY)\n      };\n    }\n\n    var x = 0,\n        y = 0,\n        i = 0;\n\n    while (i < pointersLength) {\n      x += pointers[i].clientX;\n      y += pointers[i].clientY;\n      i++;\n    }\n\n    return {\n      x: round(x / pointersLength),\n      y: round(y / pointersLength)\n    };\n  }\n  /**\r\n   * calculate the velocity between two points. unit is in px per ms.\r\n   * @param {Number} deltaTime\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   * @return {Object} velocity `x` and `y`\r\n   */\n\n\n  function getVelocity(deltaTime, x, y) {\n    return {\n      x: x / deltaTime || 0,\n      y: y / deltaTime || 0\n    };\n  }\n  /**\r\n   * get the direction between two points\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   * @return {Number} direction\r\n   */\n\n\n  function getDirection(x, y) {\n    if (x === y) {\n      return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n      return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n  }\n  /**\r\n   * calculate the absolute distance between two points\r\n   * @param {Object} p1 {x, y}\r\n   * @param {Object} p2 {x, y}\r\n   * @param {Array} [props] containing x and y keys\r\n   * @return {Number} distance\r\n   */\n\n\n  function getDistance(p1, p2, props) {\n    if (!props) {\n      props = PROPS_XY;\n    }\n\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.sqrt(x * x + y * y);\n  }\n  /**\r\n   * calculate the angle between two coordinates\r\n   * @param {Object} p1\r\n   * @param {Object} p2\r\n   * @param {Array} [props] containing x and y keys\r\n   * @return {Number} angle\r\n   */\n\n\n  function getAngle(p1, p2, props) {\n    if (!props) {\n      props = PROPS_XY;\n    }\n\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n  }\n  /**\r\n   * calculate the rotation degrees between two pointersets\r\n   * @param {Array} start array of pointers\r\n   * @param {Array} end array of pointers\r\n   * @return {Number} rotation\r\n   */\n\n\n  function getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n  }\n  /**\r\n   * calculate the scale factor between two pointersets\r\n   * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\r\n   * @param {Array} start array of pointers\r\n   * @param {Array} end array of pointers\r\n   * @return {Number} scale\r\n   */\n\n\n  function getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n  }\n\n  var MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n  };\n  var MOUSE_ELEMENT_EVENTS = 'mousedown';\n  var MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n  /**\r\n   * Mouse events input\r\n   * @constructor\r\n   * @extends Input\r\n   */\n\n  function MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n  }\n\n  inherit(MouseInput, Input, {\n    /**\r\n     * handle mouse events\r\n     * @param {Object} ev\r\n     */\n    handler: function MEhandler(ev) {\n      var eventType = MOUSE_INPUT_MAP[ev.type]; // on start we want to have the left mouse button down\n\n      if (eventType & INPUT_START && ev.button === 0) {\n        this.pressed = true;\n      }\n\n      if (eventType & INPUT_MOVE && ev.which !== 1) {\n        eventType = INPUT_END;\n      } // mouse must be down\n\n\n      if (!this.pressed) {\n        return;\n      }\n\n      if (eventType & INPUT_END) {\n        this.pressed = false;\n      }\n\n      this.callback(this.manager, eventType, {\n        pointers: [ev],\n        changedPointers: [ev],\n        pointerType: INPUT_TYPE_MOUSE,\n        srcEvent: ev\n      });\n    }\n  });\n  var POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n  }; // in IE10 the pointer types is defined as an enum\n\n  var IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n\n  };\n  var POINTER_ELEMENT_EVENTS = 'pointerdown';\n  var POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel'; // IE10 has prefixed support, and case-sensitive\n\n  if (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n  }\n  /**\r\n   * Pointer events input\r\n   * @constructor\r\n   * @extends Input\r\n   */\n\n\n  function PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n    Input.apply(this, arguments);\n    this.store = this.manager.session.pointerEvents = [];\n  }\n\n  inherit(PointerEventInput, Input, {\n    /**\r\n     * handle mouse events\r\n     * @param {Object} ev\r\n     */\n    handler: function PEhandler(ev) {\n      var store = this.store;\n      var removePointer = false;\n      var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n      var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n      var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n      var isTouch = pointerType == INPUT_TYPE_TOUCH; // get index of the event in the store\n\n      var storeIndex = inArray(store, ev.pointerId, 'pointerId'); // start and mouse must be down\n\n      if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n        if (storeIndex < 0) {\n          store.push(ev);\n          storeIndex = store.length - 1;\n        }\n      } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        removePointer = true;\n      } // it not found, so the pointer hasn't been down (so it's probably a hover)\n\n\n      if (storeIndex < 0) {\n        return;\n      } // update the event in the store\n\n\n      store[storeIndex] = ev;\n      this.callback(this.manager, eventType, {\n        pointers: store,\n        changedPointers: [ev],\n        pointerType: pointerType,\n        srcEvent: ev\n      });\n\n      if (removePointer) {\n        // remove from the store\n        store.splice(storeIndex, 1);\n      }\n    }\n  });\n  var SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n  };\n  var SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\n  var SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n  /**\r\n   * Touch events input\r\n   * @constructor\r\n   * @extends Input\r\n   */\n\n  function SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n    Input.apply(this, arguments);\n  }\n\n  inherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n      var type = SINGLE_TOUCH_INPUT_MAP[ev.type]; // should we handle the touch events?\n\n      if (type === INPUT_START) {\n        this.started = true;\n      }\n\n      if (!this.started) {\n        return;\n      }\n\n      var touches = normalizeSingleTouches.call(this, ev, type); // when done, reset the started state\n\n      if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n        this.started = false;\n      }\n\n      this.callback(this.manager, type, {\n        pointers: touches[0],\n        changedPointers: touches[1],\n        pointerType: INPUT_TYPE_TOUCH,\n        srcEvent: ev\n      });\n    }\n  });\n  /**\r\n   * @this {TouchInput}\r\n   * @param {Object} ev\r\n   * @param {Number} type flag\r\n   * @returns {undefined|Array} [all, changed]\r\n   */\n\n  function normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n      all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n  }\n\n  var TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n  };\n  var TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n  /**\r\n   * Multi-user touch events input\r\n   * @constructor\r\n   * @extends Input\r\n   */\n\n  function TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n    Input.apply(this, arguments);\n  }\n\n  inherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n      var type = TOUCH_INPUT_MAP[ev.type];\n      var touches = getTouches.call(this, ev, type);\n\n      if (!touches) {\n        return;\n      }\n\n      this.callback(this.manager, type, {\n        pointers: touches[0],\n        changedPointers: touches[1],\n        pointerType: INPUT_TYPE_TOUCH,\n        srcEvent: ev\n      });\n    }\n  });\n  /**\r\n   * @this {TouchInput}\r\n   * @param {Object} ev\r\n   * @param {Number} type flag\r\n   * @returns {undefined|Array} [all, changed]\r\n   */\n\n  function getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds; // when there is only one touch, the process can be simplified\n\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n      targetIds[allTouches[0].identifier] = true;\n      return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target; // get target touches from touches\n\n    targetTouches = allTouches.filter(function (touch) {\n      return hasParent(touch.target, target);\n    }); // collect touches\n\n    if (type === INPUT_START) {\n      i = 0;\n\n      while (i < targetTouches.length) {\n        targetIds[targetTouches[i].identifier] = true;\n        i++;\n      }\n    } // filter changed touches to only contain touches that exist in the collected target ids\n\n\n    i = 0;\n\n    while (i < changedTouches.length) {\n      if (targetIds[changedTouches[i].identifier]) {\n        changedTargetTouches.push(changedTouches[i]);\n      } // cleanup removed touches\n\n\n      if (type & (INPUT_END | INPUT_CANCEL)) {\n        delete targetIds[changedTouches[i].identifier];\n      }\n\n      i++;\n    }\n\n    if (!changedTargetTouches.length) {\n      return;\n    }\n\n    return [// merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n    uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true), changedTargetTouches];\n  }\n  /**\r\n   * Combined touch and mouse input\r\n   *\r\n   * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\r\n   * This because touch devices also emit mouse events while doing a touch.\r\n   *\r\n   * @constructor\r\n   * @extends Input\r\n   */\n\n\n  var DEDUP_TIMEOUT = 2500;\n  var DEDUP_DISTANCE = 25;\n\n  function TouchMouseInput() {\n    Input.apply(this, arguments);\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n    this.primaryTouch = null;\n    this.lastTouches = [];\n  }\n\n  inherit(TouchMouseInput, Input, {\n    /**\r\n     * handle mouse and touch events\r\n     * @param {Hammer} manager\r\n     * @param {String} inputEvent\r\n     * @param {Object} inputData\r\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n      var isTouch = inputData.pointerType == INPUT_TYPE_TOUCH,\n          isMouse = inputData.pointerType == INPUT_TYPE_MOUSE;\n\n      if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n        return;\n      } // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n\n\n      if (isTouch) {\n        recordTouches.call(this, inputEvent, inputData);\n      } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n        return;\n      }\n\n      this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\r\n     * remove the event listeners\r\n     */\n    destroy: function destroy() {\n      this.touch.destroy();\n      this.mouse.destroy();\n    }\n  });\n\n  function recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n      this.primaryTouch = eventData.changedPointers[0].identifier;\n      setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n      setLastTouch.call(this, eventData);\n    }\n  }\n\n  function setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n      var lastTouch = {\n        x: touch.clientX,\n        y: touch.clientY\n      };\n      this.lastTouches.push(lastTouch);\n      var lts = this.lastTouches;\n\n      var removeLastTouch = function () {\n        var i = lts.indexOf(lastTouch);\n\n        if (i > -1) {\n          lts.splice(i, 1);\n        }\n      };\n\n      setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n  }\n\n  function isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX,\n        y = eventData.srcEvent.clientY;\n\n    for (var i = 0; i < this.lastTouches.length; i++) {\n      var t = this.lastTouches[i];\n      var dx = Math.abs(x - t.x),\n          dy = Math.abs(y - t.y);\n\n      if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  var PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\n  var NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined; // magical touchAction value\n\n  var TOUCH_ACTION_COMPUTE = 'compute';\n  var TOUCH_ACTION_AUTO = 'auto';\n  var TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\n\n  var TOUCH_ACTION_NONE = 'none';\n  var TOUCH_ACTION_PAN_X = 'pan-x';\n  var TOUCH_ACTION_PAN_Y = 'pan-y';\n  var TOUCH_ACTION_MAP = getTouchActionProps();\n  /**\r\n   * Touch Action\r\n   * sets the touchAction property or uses the js alternative\r\n   * @param {Manager} manager\r\n   * @param {String} value\r\n   * @constructor\r\n   */\n\n  function TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n  }\n\n  TouchAction.prototype = {\n    /**\r\n     * set the touchAction value on the element or enable the polyfill\r\n     * @param {String} value\r\n     */\n    set: function (value) {\n      // find out the touch-action by the event handlers\n      if (value == TOUCH_ACTION_COMPUTE) {\n        value = this.compute();\n      }\n\n      if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n        this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n      }\n\n      this.actions = value.toLowerCase().trim();\n    },\n\n    /**\r\n     * just re-set the touchAction value\r\n     */\n    update: function () {\n      this.set(this.manager.options.touchAction);\n    },\n\n    /**\r\n     * compute the value for the touchAction property based on the recognizer's settings\r\n     * @returns {String} value\r\n     */\n    compute: function () {\n      var actions = [];\n      each(this.manager.recognizers, function (recognizer) {\n        if (boolOrFn(recognizer.options.enable, [recognizer])) {\n          actions = actions.concat(recognizer.getTouchAction());\n        }\n      });\n      return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\r\n     * this method is called on each input cycle and provides the preventing of the browser behavior\r\n     * @param {Object} input\r\n     */\n    preventDefaults: function (input) {\n      var srcEvent = input.srcEvent;\n      var direction = input.offsetDirection; // if the touch action did prevented once this session\n\n      if (this.manager.session.prevented) {\n        srcEvent.preventDefault();\n        return;\n      }\n\n      var actions = this.actions;\n      var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n      var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n      var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n      if (hasNone) {\n        //do not prevent defaults if this is a tap gesture\n        var isTapPointer = input.pointers.length === 1;\n        var isTapMovement = input.distance < 2;\n        var isTapTouchTime = input.deltaTime < 250;\n\n        if (isTapPointer && isTapMovement && isTapTouchTime) {\n          return;\n        }\n      }\n\n      if (hasPanX && hasPanY) {\n        // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n        return;\n      }\n\n      if (hasNone || hasPanY && direction & DIRECTION_HORIZONTAL || hasPanX && direction & DIRECTION_VERTICAL) {\n        return this.preventSrc(srcEvent);\n      }\n    },\n\n    /**\r\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\r\n     * @param {Object} srcEvent\r\n     */\n    preventSrc: function (srcEvent) {\n      this.manager.session.prevented = true;\n      srcEvent.preventDefault();\n    }\n  };\n  /**\r\n   * when the touchActions are collected they are not a valid value, so we need to clean things up. *\r\n   * @param {String} actions\r\n   * @returns {*}\r\n   */\n\n  function cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n      return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y); // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n\n    if (hasPanX && hasPanY) {\n      return TOUCH_ACTION_NONE;\n    } // pan-x OR pan-y\n\n\n    if (hasPanX || hasPanY) {\n      return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    } // manipulation\n\n\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n      return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n  }\n\n  function getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n      return false;\n    }\n\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function (val) {\n      // If css.supports is not supported but there is native touch-action assume it supports\n      // all values. This is the case for IE 10 and 11.\n      touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n  }\n  /**\r\n   * Recognizer flow explained; *\r\n   * All recognizers have the initial state of POSSIBLE when a input session starts.\r\n   * The definition of a input session is from the first input until the last input, with all it's movement in it. *\r\n   * Example session for mouse-input: mousedown -> mousemove -> mouseup\r\n   *\r\n   * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\r\n   * which determines with state it should be.\r\n   *\r\n   * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\r\n   * POSSIBLE to give it another change on the next cycle.\r\n   *\r\n   *               Possible\r\n   *                  |\r\n   *            +-----+---------------+\r\n   *            |                     |\r\n   *      +-----+-----+               |\r\n   *      |           |               |\r\n   *   Failed      Cancelled          |\r\n   *                          +-------+------+\r\n   *                          |              |\r\n   *                      Recognized       Began\r\n   *                                         |\r\n   *                                      Changed\r\n   *                                         |\r\n   *                                  Ended/Recognized\r\n   */\n\n\n  var STATE_POSSIBLE = 1;\n  var STATE_BEGAN = 2;\n  var STATE_CHANGED = 4;\n  var STATE_ENDED = 8;\n  var STATE_RECOGNIZED = STATE_ENDED;\n  var STATE_CANCELLED = 16;\n  var STATE_FAILED = 32;\n  /**\r\n   * Recognizer\r\n   * Every recognizer needs to extend from this class.\r\n   * @constructor\r\n   * @param {Object} options\r\n   */\n\n  function Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n    this.id = uniqueId();\n    this.manager = null; // default is enable true\n\n    this.options.enable = ifUndefined(this.options.enable, true);\n    this.state = STATE_POSSIBLE;\n    this.simultaneous = {};\n    this.requireFail = [];\n  }\n\n  Recognizer.prototype = {\n    /**\r\n     * @virtual\r\n     * @type {Object}\r\n     */\n    defaults: {},\n\n    /**\r\n     * set options\r\n     * @param {Object} options\r\n     * @return {Recognizer}\r\n     */\n    set: function (options) {\n      assign(this.options, options); // also update the touchAction, in case something changed about the directions/enabled state\n\n      this.manager && this.manager.touchAction.update();\n      return this;\n    },\n\n    /**\r\n     * recognize simultaneous with an other recognizer.\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\n    recognizeWith: function (otherRecognizer) {\n      if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n        return this;\n      }\n\n      var simultaneous = this.simultaneous;\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\n      if (!simultaneous[otherRecognizer.id]) {\n        simultaneous[otherRecognizer.id] = otherRecognizer;\n        otherRecognizer.recognizeWith(this);\n      }\n\n      return this;\n    },\n\n    /**\r\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\n    dropRecognizeWith: function (otherRecognizer) {\n      if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n        return this;\n      }\n\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n      delete this.simultaneous[otherRecognizer.id];\n      return this;\n    },\n\n    /**\r\n     * recognizer can only run when an other is failing\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\n    requireFailure: function (otherRecognizer) {\n      if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n        return this;\n      }\n\n      var requireFail = this.requireFail;\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n\n      if (inArray(requireFail, otherRecognizer) === -1) {\n        requireFail.push(otherRecognizer);\n        otherRecognizer.requireFailure(this);\n      }\n\n      return this;\n    },\n\n    /**\r\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\n    dropRequireFailure: function (otherRecognizer) {\n      if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n        return this;\n      }\n\n      otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n      var index = inArray(this.requireFail, otherRecognizer);\n\n      if (index > -1) {\n        this.requireFail.splice(index, 1);\n      }\n\n      return this;\n    },\n\n    /**\r\n     * has require failures boolean\r\n     * @returns {boolean}\r\n     */\n    hasRequireFailures: function () {\n      return this.requireFail.length > 0;\n    },\n\n    /**\r\n     * if the recognizer can recognize simultaneous with an other recognizer\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Boolean}\r\n     */\n    canRecognizeWith: function (otherRecognizer) {\n      return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\r\n     * You should use `tryEmit` instead of `emit` directly to check\r\n     * that all the needed recognizers has failed before emitting.\r\n     * @param {Object} input\r\n     */\n    emit: function (input) {\n      var self = this;\n      var state = this.state;\n\n      function emit(event) {\n        self.manager.emit(event, input);\n      } // 'panstart' and 'panmove'\n\n\n      if (state < STATE_ENDED) {\n        emit(self.options.event + stateStr(state));\n      }\n\n      emit(self.options.event); // simple 'eventName' events\n\n      if (input.additionalEvent) {\n        // additional event(panleft, panright, pinchin, pinchout...)\n        emit(input.additionalEvent);\n      } // panend and pancancel\n\n\n      if (state >= STATE_ENDED) {\n        emit(self.options.event + stateStr(state));\n      }\n    },\n\n    /**\r\n     * Check that all the require failure recognizers has failed,\r\n     * if true, it emits a gesture event,\r\n     * otherwise, setup the state to FAILED.\r\n     * @param {Object} input\r\n     */\n    tryEmit: function (input) {\n      if (this.canEmit()) {\n        return this.emit(input);\n      } // it's failing anyway\n\n\n      this.state = STATE_FAILED;\n    },\n\n    /**\r\n     * can we emit?\r\n     * @returns {boolean}\r\n     */\n    canEmit: function () {\n      var i = 0;\n\n      while (i < this.requireFail.length) {\n        if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n          return false;\n        }\n\n        i++;\n      }\n\n      return true;\n    },\n\n    /**\r\n     * update the recognizer\r\n     * @param {Object} inputData\r\n     */\n    recognize: function (inputData) {\n      // make a new copy of the inputData\n      // so we can change the inputData without messing up the other recognizers\n      var inputDataClone = assign({}, inputData); // is is enabled and allow recognizing?\n\n      if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n        this.reset();\n        this.state = STATE_FAILED;\n        return;\n      } // reset when we've reached the end\n\n\n      if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n        this.state = STATE_POSSIBLE;\n      }\n\n      this.state = this.process(inputDataClone); // the recognizer has recognized a gesture\n      // so trigger an event\n\n      if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n        this.tryEmit(inputDataClone);\n      }\n    },\n\n    /**\r\n     * return the state of the recognizer\r\n     * the actual recognizing happens in this method\r\n     * @virtual\r\n     * @param {Object} inputData\r\n     * @returns {Const} STATE\r\n     */\n    process: function (inputData) {},\n    // jshint ignore:line\n\n    /**\r\n     * return the preferred touch-action\r\n     * @virtual\r\n     * @returns {Array}\r\n     */\n    getTouchAction: function () {},\n\n    /**\r\n     * called when the gesture isn't allowed to recognize\r\n     * like when another is being recognized or it is disabled\r\n     * @virtual\r\n     */\n    reset: function () {}\n  };\n  /**\r\n   * get a usable string, used as event postfix\r\n   * @param {Const} state\r\n   * @returns {String} state\r\n   */\n\n  function stateStr(state) {\n    if (state & STATE_CANCELLED) {\n      return 'cancel';\n    } else if (state & STATE_ENDED) {\n      return 'end';\n    } else if (state & STATE_CHANGED) {\n      return 'move';\n    } else if (state & STATE_BEGAN) {\n      return 'start';\n    }\n\n    return '';\n  }\n  /**\r\n   * direction cons to string\r\n   * @param {Const} direction\r\n   * @returns {String}\r\n   */\n\n\n  function directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n      return 'down';\n    } else if (direction == DIRECTION_UP) {\n      return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n      return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n      return 'right';\n    }\n\n    return '';\n  }\n  /**\r\n   * get a recognizer by name if it is bound to a manager\r\n   * @param {Recognizer|String} otherRecognizer\r\n   * @param {Recognizer} recognizer\r\n   * @returns {Recognizer}\r\n   */\n\n\n  function getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n\n    if (manager) {\n      return manager.get(otherRecognizer);\n    }\n\n    return otherRecognizer;\n  }\n  /**\r\n   * This recognizer is just used as a base for the simple attribute recognizers.\r\n   * @constructor\r\n   * @extends Recognizer\r\n   */\n\n\n  function AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n  }\n\n  inherit(AttrRecognizer, Recognizer, {\n    /**\r\n     * @namespace\r\n     * @memberof AttrRecognizer\r\n     */\n    defaults: {\n      /**\r\n       * @type {Number}\r\n       * @default 1\r\n       */\n      pointers: 1\n    },\n\n    /**\r\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\r\n     * @memberof AttrRecognizer\r\n     * @param {Object} input\r\n     * @returns {Boolean} recognized\r\n     */\n    attrTest: function (input) {\n      var optionPointers = this.options.pointers;\n      return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\r\n     * Process the input and return the state for the recognizer\r\n     * @memberof AttrRecognizer\r\n     * @param {Object} input\r\n     * @returns {*} State\r\n     */\n    process: function (input) {\n      var state = this.state;\n      var eventType = input.eventType;\n      var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n      var isValid = this.attrTest(input); // on cancel input and we've recognized before, return STATE_CANCELLED\n\n      if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n        return state | STATE_CANCELLED;\n      } else if (isRecognized || isValid) {\n        if (eventType & INPUT_END) {\n          return state | STATE_ENDED;\n        } else if (!(state & STATE_BEGAN)) {\n          return STATE_BEGAN;\n        }\n\n        return state | STATE_CHANGED;\n      }\n\n      return STATE_FAILED;\n    }\n  });\n  /**\r\n   * Pan\r\n   * Recognized when the pointer is down and moved in the allowed direction.\r\n   * @constructor\r\n   * @extends AttrRecognizer\r\n   */\n\n  function PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n    this.pX = null;\n    this.pY = null;\n  }\n\n  inherit(PanRecognizer, AttrRecognizer, {\n    /**\r\n     * @namespace\r\n     * @memberof PanRecognizer\r\n     */\n    defaults: {\n      event: 'pan',\n      threshold: 10,\n      pointers: 1,\n      direction: DIRECTION_ALL\n    },\n    getTouchAction: function () {\n      var direction = this.options.direction;\n      var actions = [];\n\n      if (direction & DIRECTION_HORIZONTAL) {\n        actions.push(TOUCH_ACTION_PAN_Y);\n      }\n\n      if (direction & DIRECTION_VERTICAL) {\n        actions.push(TOUCH_ACTION_PAN_X);\n      }\n\n      return actions;\n    },\n    directionTest: function (input) {\n      var options = this.options;\n      var hasMoved = true;\n      var distance = input.distance;\n      var direction = input.direction;\n      var x = input.deltaX;\n      var y = input.deltaY; // lock to axis?\n\n      if (!(direction & options.direction)) {\n        if (options.direction & DIRECTION_HORIZONTAL) {\n          direction = x === 0 ? DIRECTION_NONE : x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n          hasMoved = x != this.pX;\n          distance = Math.abs(input.deltaX);\n        } else {\n          direction = y === 0 ? DIRECTION_NONE : y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n          hasMoved = y != this.pY;\n          distance = Math.abs(input.deltaY);\n        }\n      }\n\n      input.direction = direction;\n      return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n    attrTest: function (input) {\n      return AttrRecognizer.prototype.attrTest.call(this, input) && (this.state & STATE_BEGAN || !(this.state & STATE_BEGAN) && this.directionTest(input));\n    },\n    emit: function (input) {\n      this.pX = input.deltaX;\n      this.pY = input.deltaY;\n      var direction = directionStr(input.direction);\n\n      if (direction) {\n        input.additionalEvent = this.options.event + direction;\n      }\n\n      this._super.emit.call(this, input);\n    }\n  });\n  /**\r\n   * Pinch\r\n   * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\r\n   * @constructor\r\n   * @extends AttrRecognizer\r\n   */\n\n  function PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n  }\n\n  inherit(PinchRecognizer, AttrRecognizer, {\n    /**\r\n     * @namespace\r\n     * @memberof PinchRecognizer\r\n     */\n    defaults: {\n      event: 'pinch',\n      threshold: 0,\n      pointers: 2\n    },\n    getTouchAction: function () {\n      return [TOUCH_ACTION_NONE];\n    },\n    attrTest: function (input) {\n      return this._super.attrTest.call(this, input) && (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n    emit: function (input) {\n      if (input.scale !== 1) {\n        var inOut = input.scale < 1 ? 'in' : 'out';\n        input.additionalEvent = this.options.event + inOut;\n      }\n\n      this._super.emit.call(this, input);\n    }\n  });\n  /**\r\n   * Press\r\n   * Recognized when the pointer is down for x ms without any movement.\r\n   * @constructor\r\n   * @extends Recognizer\r\n   */\n\n  function PressRecognizer() {\n    Recognizer.apply(this, arguments);\n    this._timer = null;\n    this._input = null;\n  }\n\n  inherit(PressRecognizer, Recognizer, {\n    /**\r\n     * @namespace\r\n     * @memberof PressRecognizer\r\n     */\n    defaults: {\n      event: 'press',\n      pointers: 1,\n      time: 251,\n      // minimal time of the pointer to be pressed\n      threshold: 9 // a minimal movement is ok, but keep it low\n\n    },\n    getTouchAction: function () {\n      return [TOUCH_ACTION_AUTO];\n    },\n    process: function (input) {\n      var options = this.options;\n      var validPointers = input.pointers.length === options.pointers;\n      var validMovement = input.distance < options.threshold;\n      var validTime = input.deltaTime > options.time;\n      this._input = input; // we only allow little movement\n      // and we've reached an end event, so a tap is possible\n\n      if (!validMovement || !validPointers || input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime) {\n        this.reset();\n      } else if (input.eventType & INPUT_START) {\n        this.reset();\n        this._timer = setTimeoutContext(function () {\n          this.state = STATE_RECOGNIZED;\n          this.tryEmit();\n        }, options.time, this);\n      } else if (input.eventType & INPUT_END) {\n        return STATE_RECOGNIZED;\n      }\n\n      return STATE_FAILED;\n    },\n    reset: function () {\n      clearTimeout(this._timer);\n    },\n    emit: function (input) {\n      if (this.state !== STATE_RECOGNIZED) {\n        return;\n      }\n\n      if (input && input.eventType & INPUT_END) {\n        this.manager.emit(this.options.event + 'up', input);\n      } else {\n        this._input.timeStamp = now();\n        this.manager.emit(this.options.event, this._input);\n      }\n    }\n  });\n  /**\r\n   * Rotate\r\n   * Recognized when two or more pointer are moving in a circular motion.\r\n   * @constructor\r\n   * @extends AttrRecognizer\r\n   */\n\n  function RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n  }\n\n  inherit(RotateRecognizer, AttrRecognizer, {\n    /**\r\n     * @namespace\r\n     * @memberof RotateRecognizer\r\n     */\n    defaults: {\n      event: 'rotate',\n      threshold: 0,\n      pointers: 2\n    },\n    getTouchAction: function () {\n      return [TOUCH_ACTION_NONE];\n    },\n    attrTest: function (input) {\n      return this._super.attrTest.call(this, input) && (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n  });\n  /**\r\n   * Swipe\r\n   * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\r\n   * @constructor\r\n   * @extends AttrRecognizer\r\n   */\n\n  function SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n  }\n\n  inherit(SwipeRecognizer, AttrRecognizer, {\n    /**\r\n     * @namespace\r\n     * @memberof SwipeRecognizer\r\n     */\n    defaults: {\n      event: 'swipe',\n      threshold: 10,\n      velocity: 0.3,\n      direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n      pointers: 1\n    },\n    getTouchAction: function () {\n      return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n    attrTest: function (input) {\n      var direction = this.options.direction;\n      var velocity;\n\n      if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n        velocity = input.overallVelocity;\n      } else if (direction & DIRECTION_HORIZONTAL) {\n        velocity = input.overallVelocityX;\n      } else if (direction & DIRECTION_VERTICAL) {\n        velocity = input.overallVelocityY;\n      }\n\n      return this._super.attrTest.call(this, input) && direction & input.offsetDirection && input.distance > this.options.threshold && input.maxPointers == this.options.pointers && abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n    emit: function (input) {\n      var direction = directionStr(input.offsetDirection);\n\n      if (direction) {\n        this.manager.emit(this.options.event + direction, input);\n      }\n\n      this.manager.emit(this.options.event, input);\n    }\n  });\n  /**\r\n   * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\r\n   * between the given interval and position. The delay option can be used to recognize multi-taps without firing\r\n   * a single tap.\r\n   *\r\n   * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\r\n   * multi-taps being recognized.\r\n   * @constructor\r\n   * @extends Recognizer\r\n   */\n\n  function TapRecognizer() {\n    Recognizer.apply(this, arguments); // previous time and center,\n    // used for tap counting\n\n    this.pTime = false;\n    this.pCenter = false;\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n  }\n\n  inherit(TapRecognizer, Recognizer, {\n    /**\r\n     * @namespace\r\n     * @memberof PinchRecognizer\r\n     */\n    defaults: {\n      event: 'tap',\n      pointers: 1,\n      taps: 1,\n      interval: 300,\n      // max time between the multi-tap taps\n      time: 250,\n      // max time of the pointer to be down (like finger on the screen)\n      threshold: 9,\n      // a minimal movement is ok, but keep it low\n      posThreshold: 10 // a multi-tap can be a bit off the initial position\n\n    },\n    getTouchAction: function () {\n      return [TOUCH_ACTION_MANIPULATION];\n    },\n    process: function (input) {\n      var options = this.options;\n      var validPointers = input.pointers.length === options.pointers;\n      var validMovement = input.distance < options.threshold;\n      var validTouchTime = input.deltaTime < options.time;\n      this.reset();\n\n      if (input.eventType & INPUT_START && this.count === 0) {\n        return this.failTimeout();\n      } // we only allow little movement\n      // and we've reached an end event, so a tap is possible\n\n\n      if (validMovement && validTouchTime && validPointers) {\n        if (input.eventType != INPUT_END) {\n          return this.failTimeout();\n        }\n\n        var validInterval = this.pTime ? input.timeStamp - this.pTime < options.interval : true;\n        var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n        this.pTime = input.timeStamp;\n        this.pCenter = input.center;\n\n        if (!validMultiTap || !validInterval) {\n          this.count = 1;\n        } else {\n          this.count += 1;\n        }\n\n        this._input = input; // if tap count matches we have recognized it,\n        // else it has began recognizing...\n\n        var tapCount = this.count % options.taps;\n\n        if (tapCount === 0) {\n          // no failing requirements, immediately trigger the tap event\n          // or wait as long as the multitap interval to trigger\n          if (!this.hasRequireFailures()) {\n            return STATE_RECOGNIZED;\n          } else {\n            this._timer = setTimeoutContext(function () {\n              this.state = STATE_RECOGNIZED;\n              this.tryEmit();\n            }, options.interval, this);\n            return STATE_BEGAN;\n          }\n        }\n      }\n\n      return STATE_FAILED;\n    },\n    failTimeout: function () {\n      this._timer = setTimeoutContext(function () {\n        this.state = STATE_FAILED;\n      }, this.options.interval, this);\n      return STATE_FAILED;\n    },\n    reset: function () {\n      clearTimeout(this._timer);\n    },\n    emit: function () {\n      if (this.state == STATE_RECOGNIZED) {\n        this._input.tapCount = this.count;\n        this.manager.emit(this.options.event, this._input);\n      }\n    }\n  });\n  /**\r\n   * Simple way to create a manager with a default set of recognizers.\r\n   * @param {HTMLElement} element\r\n   * @param {Object} [options]\r\n   * @constructor\r\n   */\n\n  function Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n  }\n  /**\r\n   * @const {string}\r\n   */\n\n\n  Hammer.VERSION = '2.0.7';\n  /**\r\n   * default settings\r\n   * @namespace\r\n   */\n\n  Hammer.defaults = {\n    /**\r\n     * set if DOM events are being triggered.\r\n     * But this is slower and unused by simple implementations, so disabled by default.\r\n     * @type {Boolean}\r\n     * @default false\r\n     */\n    domEvents: false,\n\n    /**\r\n     * The value for the touchAction property/fallback.\r\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\r\n     * @type {String}\r\n     * @default compute\r\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\r\n     * @type {Boolean}\r\n     * @default true\r\n     */\n    enable: true,\n\n    /**\r\n     * EXPERIMENTAL FEATURE -- can be removed/changed\r\n     * Change the parent input target element.\r\n     * If Null, then it is being set the to main element.\r\n     * @type {Null|EventTarget}\r\n     * @default null\r\n     */\n    inputTarget: null,\n\n    /**\r\n     * force an input class\r\n     * @type {Null|Function}\r\n     * @default null\r\n     */\n    inputClass: null,\n\n    /**\r\n     * Default recognizer setup when calling `Hammer()`\r\n     * When creating a new Manager these will be skipped.\r\n     * @type {Array}\r\n     */\n    preset: [// RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n    [RotateRecognizer, {\n      enable: false\n    }], [PinchRecognizer, {\n      enable: false\n    }, ['rotate']], [SwipeRecognizer, {\n      direction: DIRECTION_HORIZONTAL\n    }], [PanRecognizer, {\n      direction: DIRECTION_HORIZONTAL\n    }, ['swipe']], [TapRecognizer], [TapRecognizer, {\n      event: 'doubletap',\n      taps: 2\n    }, ['tap']], [PressRecognizer]],\n\n    /**\r\n     * Some CSS properties can be used to improve the working of Hammer.\r\n     * Add them to this method and they will be set when creating a new Manager.\r\n     * @namespace\r\n     */\n    cssProps: {\n      /**\r\n       * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\r\n       * @type {String}\r\n       * @default 'none'\r\n       */\n      userSelect: 'none',\n\n      /**\r\n       * Disable the Windows Phone grippers when pressing an element.\r\n       * @type {String}\r\n       * @default 'none'\r\n       */\n      touchSelect: 'none',\n\n      /**\r\n       * Disables the default callout shown when you touch and hold a touch target.\r\n       * On iOS, when you touch and hold a touch target such as a link, Safari displays\r\n       * a callout containing information about the link. This property allows you to disable that callout.\r\n       * @type {String}\r\n       * @default 'none'\r\n       */\n      touchCallout: 'none',\n\n      /**\r\n       * Specifies whether zooming is enabled. Used by IE10>\r\n       * @type {String}\r\n       * @default 'none'\r\n       */\n      contentZooming: 'none',\n\n      /**\r\n       * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\r\n       * @type {String}\r\n       * @default 'none'\r\n       */\n      userDrag: 'none',\n\n      /**\r\n       * Overrides the highlight color shown when the user taps a link or a JavaScript\r\n       * clickable element in iOS. This property obeys the alpha value, if specified.\r\n       * @type {String}\r\n       * @default 'rgba(0,0,0,0)'\r\n       */\n      tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n  };\n  var STOP = 1;\n  var FORCED_STOP = 2;\n  /**\r\n   * Manager\r\n   * @param {HTMLElement} element\r\n   * @param {Object} [options]\r\n   * @constructor\r\n   */\n\n  function Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n    this.options.inputTarget = this.options.inputTarget || element;\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n    toggleCssProps(this, true);\n    each(this.options.recognizers, function (item) {\n      var recognizer = this.add(new item[0](item[1]));\n      item[2] && recognizer.recognizeWith(item[2]);\n      item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n  }\n\n  Manager.prototype = {\n    /**\r\n     * set options\r\n     * @param {Object} options\r\n     * @returns {Manager}\r\n     */\n    set: function (options) {\n      assign(this.options, options); // Options that need a little more setup\n\n      if (options.touchAction) {\n        this.touchAction.update();\n      }\n\n      if (options.inputTarget) {\n        // Clean up existing event listeners and reinitialize\n        this.input.destroy();\n        this.input.target = options.inputTarget;\n        this.input.init();\n      }\n\n      return this;\n    },\n\n    /**\r\n     * stop recognizing for this session.\r\n     * This session will be discarded, when a new [input]start event is fired.\r\n     * When forced, the recognizer cycle is stopped immediately.\r\n     * @param {Boolean} [force]\r\n     */\n    stop: function (force) {\n      this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\r\n     * run the recognizers!\r\n     * called by the inputHandler function on every movement of the pointers (touches)\r\n     * it walks through all the recognizers and tries to detect the gesture that is being made\r\n     * @param {Object} inputData\r\n     */\n    recognize: function (inputData) {\n      var session = this.session;\n\n      if (session.stopped) {\n        return;\n      } // run the touch-action polyfill\n\n\n      this.touchAction.preventDefaults(inputData);\n      var recognizer;\n      var recognizers = this.recognizers; // this holds the recognizer that is being recognized.\n      // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n      // if no recognizer is detecting a thing, it is set to `null`\n\n      var curRecognizer = session.curRecognizer; // reset when the last recognizer is recognized\n      // or when we're in a new session\n\n      if (!curRecognizer || curRecognizer && curRecognizer.state & STATE_RECOGNIZED) {\n        curRecognizer = session.curRecognizer = null;\n      }\n\n      var i = 0;\n\n      while (i < recognizers.length) {\n        recognizer = recognizers[i]; // find out if we are allowed try to recognize the input for this one.\n        // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n        // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n        //      that is being recognized.\n        // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n        //      this can be setup with the `recognizeWith()` method on the recognizer.\n\n        if (session.stopped !== FORCED_STOP && ( // 1\n        !curRecognizer || recognizer == curRecognizer || // 2\n        recognizer.canRecognizeWith(curRecognizer))) {\n          // 3\n          recognizer.recognize(inputData);\n        } else {\n          recognizer.reset();\n        } // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n        // current active recognizer. but only if we don't already have an active recognizer\n\n\n        if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n          curRecognizer = session.curRecognizer = recognizer;\n        }\n\n        i++;\n      }\n    },\n\n    /**\r\n     * get a recognizer by its event name.\r\n     * @param {Recognizer|String} recognizer\r\n     * @returns {Recognizer|Null}\r\n     */\n    get: function (recognizer) {\n      if (recognizer instanceof Recognizer) {\n        return recognizer;\n      }\n\n      var recognizers = this.recognizers;\n\n      for (var i = 0; i < recognizers.length; i++) {\n        if (recognizers[i].options.event == recognizer) {\n          return recognizers[i];\n        }\n      }\n\n      return null;\n    },\n\n    /**\r\n     * add a recognizer to the manager\r\n     * existing recognizers with the same event name will be removed\r\n     * @param {Recognizer} recognizer\r\n     * @returns {Recognizer|Manager}\r\n     */\n    add: function (recognizer) {\n      if (invokeArrayArg(recognizer, 'add', this)) {\n        return this;\n      } // remove existing\n\n\n      var existing = this.get(recognizer.options.event);\n\n      if (existing) {\n        this.remove(existing);\n      }\n\n      this.recognizers.push(recognizer);\n      recognizer.manager = this;\n      this.touchAction.update();\n      return recognizer;\n    },\n\n    /**\r\n     * remove a recognizer by name or instance\r\n     * @param {Recognizer|String} recognizer\r\n     * @returns {Manager}\r\n     */\n    remove: function (recognizer) {\n      if (invokeArrayArg(recognizer, 'remove', this)) {\n        return this;\n      }\n\n      recognizer = this.get(recognizer); // let's make sure this recognizer exists\n\n      if (recognizer) {\n        var recognizers = this.recognizers;\n        var index = inArray(recognizers, recognizer);\n\n        if (index !== -1) {\n          recognizers.splice(index, 1);\n          this.touchAction.update();\n        }\n      }\n\n      return this;\n    },\n\n    /**\r\n     * bind event\r\n     * @param {String} events\r\n     * @param {Function} handler\r\n     * @returns {EventEmitter} this\r\n     */\n    on: function (events, handler) {\n      if (events === undefined) {\n        return;\n      }\n\n      if (handler === undefined) {\n        return;\n      }\n\n      var handlers = this.handlers;\n      each(splitStr(events), function (event) {\n        handlers[event] = handlers[event] || [];\n        handlers[event].push(handler);\n      });\n      return this;\n    },\n\n    /**\r\n     * unbind event, leave emit blank to remove all handlers\r\n     * @param {String} events\r\n     * @param {Function} [handler]\r\n     * @returns {EventEmitter} this\r\n     */\n    off: function (events, handler) {\n      if (events === undefined) {\n        return;\n      }\n\n      var handlers = this.handlers;\n      each(splitStr(events), function (event) {\n        if (!handler) {\n          delete handlers[event];\n        } else {\n          handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n        }\n      });\n      return this;\n    },\n\n    /**\r\n     * emit event to the listeners\r\n     * @param {String} event\r\n     * @param {Object} data\r\n     */\n    emit: function (event, data) {\n      // we also want to trigger dom events\n      if (this.options.domEvents) {\n        triggerDomEvent(event, data);\n      } // no handlers, so skip it all\n\n\n      var handlers = this.handlers[event] && this.handlers[event].slice();\n\n      if (!handlers || !handlers.length) {\n        return;\n      }\n\n      data.type = event;\n\n      data.preventDefault = function () {\n        data.srcEvent.preventDefault();\n      };\n\n      var i = 0;\n\n      while (i < handlers.length) {\n        handlers[i](data);\n        i++;\n      }\n    },\n\n    /**\r\n     * destroy the manager and unbinds all events\r\n     * it doesn't unbind dom events, that is the user own responsibility\r\n     */\n    destroy: function () {\n      this.element && toggleCssProps(this, false);\n      this.handlers = {};\n      this.session = {};\n      this.input.destroy();\n      this.element = null;\n    }\n  };\n  /**\r\n   * add/remove the css properties as defined in manager.options.cssProps\r\n   * @param {Manager} manager\r\n   * @param {Boolean} add\r\n   */\n\n  function toggleCssProps(manager, add) {\n    var element = manager.element;\n\n    if (!element.style) {\n      return;\n    }\n\n    var prop;\n    each(manager.options.cssProps, function (value, name) {\n      prop = prefixed(element.style, name);\n\n      if (add) {\n        manager.oldCssProps[prop] = element.style[prop];\n        element.style[prop] = value;\n      } else {\n        element.style[prop] = manager.oldCssProps[prop] || '';\n      }\n    });\n\n    if (!add) {\n      manager.oldCssProps = {};\n    }\n  }\n  /**\r\n   * trigger dom event\r\n   * @param {String} event\r\n   * @param {Object} data\r\n   */\n\n\n  function triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n  }\n\n  assign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n  }); // this prevents errors when Hammer is loaded in the presence of an AMD\n  //  style loader but by script tag, not by the loader.\n\n  var freeGlobal = typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : {}; // jshint ignore:line\n\n  freeGlobal.Hammer = Hammer;\n\n  if (typeof define === 'function' && define.amd) {\n    define(function () {\n      return Hammer;\n    });\n  } else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n  } else {\n    window[exportName] = Hammer;\n  }\n})(window, document, 'Hammer');","map":{"version":3,"sources":["C:/Users/User/Desktop/FlightTrack/src/main/frontend/node_modules/hammerjs/hammer.js"],"names":["window","document","exportName","undefined","VENDOR_PREFIXES","TEST_ELEMENT","createElement","TYPE_FUNCTION","round","Math","abs","now","Date","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","Array","isArray","each","obj","iterator","i","forEach","length","call","hasOwnProperty","deprecate","method","name","message","deprecationMessage","e","Error","stack","replace","log","console","warn","apply","arguments","assign","Object","target","TypeError","output","index","source","nextKey","extend","dest","src","merge","keys","inherit","child","base","properties","baseP","prototype","childP","create","constructor","_super","boundFn","boolOrFn","val","args","ifUndefined","val1","val2","addEventListeners","types","handler","splitStr","type","addEventListener","removeEventListeners","removeEventListener","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","split","inArray","findByKey","toArray","slice","uniqueArray","key","sort","results","values","push","sortUniqueArray","a","b","prefixed","property","prefix","prop","camelProp","toUpperCase","_uniqueId","uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","MOBILE_REGEX","SUPPORT_TOUCH","SUPPORT_POINTER_EVENTS","SUPPORT_ONLY_TOUCH","test","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_PEN","INPUT_TYPE_MOUSE","INPUT_TYPE_KINECT","COMPUTE_INTERVAL","INPUT_START","INPUT_MOVE","INPUT_END","INPUT_CANCEL","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","PROPS_XY","PROPS_CLIENT_XY","Input","manager","callback","self","options","inputTarget","domHandler","ev","enable","init","evEl","evTarget","evWin","destroy","createInputInstance","Type","inputClass","PointerEventInput","TouchInput","MouseInput","TouchMouseInput","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","isFinal","session","computeInputData","emit","recognize","prevInput","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","deltaTime","angle","getAngle","distance","getDistance","computeDeltaXY","offsetDirection","getDirection","deltaX","deltaY","overallVelocity","getVelocity","overallVelocityX","x","overallVelocityY","y","scale","getScale","rotation","getRotation","maxPointers","computeIntervalInputData","srcEvent","offset","offsetDelta","prevDelta","last","lastInterval","velocity","velocityX","velocityY","direction","v","clientX","clientY","p1","p2","props","sqrt","atan2","PI","start","end","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","MOUSE_ELEMENT_EVENTS","MOUSE_WINDOW_EVENTS","pressed","MEhandler","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","MSPointerEvent","PointerEvent","store","pointerEvents","PEhandler","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","splice","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","SingleTouchInput","started","TEhandler","touches","normalizeSingleTouches","all","changed","changedTouches","concat","TOUCH_INPUT_MAP","TOUCH_TARGET_EVENTS","targetIds","MTEhandler","getTouches","allTouches","identifier","targetTouches","changedTargetTouches","filter","touch","DEDUP_TIMEOUT","DEDUP_DISTANCE","mouse","primaryTouch","lastTouches","TMEhandler","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","recordTouches","isSyntheticEvent","eventData","setLastTouch","lastTouch","lts","removeLastTouch","t","dx","dy","PREFIXED_TOUCH_ACTION","style","NATIVE_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","TOUCH_ACTION_AUTO","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_NONE","TOUCH_ACTION_PAN_X","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MAP","getTouchActionProps","TouchAction","value","set","compute","actions","update","touchAction","recognizers","recognizer","getTouchAction","cleanTouchActions","join","preventDefaults","prevented","preventDefault","hasNone","hasPanY","hasPanX","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","touchMap","cssSupports","CSS","supports","STATE_POSSIBLE","STATE_BEGAN","STATE_CHANGED","STATE_ENDED","STATE_RECOGNIZED","STATE_CANCELLED","STATE_FAILED","Recognizer","defaults","id","state","simultaneous","requireFail","recognizeWith","otherRecognizer","getRecognizerByNameIfManager","dropRecognizeWith","requireFailure","dropRequireFailure","hasRequireFailures","canRecognizeWith","event","stateStr","additionalEvent","tryEmit","canEmit","inputDataClone","reset","process","directionStr","get","AttrRecognizer","attrTest","optionPointers","isRecognized","isValid","PanRecognizer","pX","pY","threshold","directionTest","hasMoved","PinchRecognizer","inOut","PressRecognizer","_timer","_input","time","validPointers","validMovement","validTime","clearTimeout","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","count","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","Hammer","preset","Manager","VERSION","domEvents","cssProps","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","STOP","FORCED_STOP","handlers","oldCssProps","toggleCssProps","item","add","stop","force","stopped","curRecognizer","existing","remove","on","events","off","data","triggerDomEvent","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","Tap","Pan","Swipe","Pinch","Rotate","Press","freeGlobal","define","amd","module","exports"],"mappings":"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","sourcesContent":["/*! Hammer.JS - v2.0.7 - 2016-04-22\r\n * http://hammerjs.github.io/\r\n *\r\n * Copyright (c) 2016 Jorik Tangelder;\r\n * Licensed under the MIT license */\r\n(function(window, document, exportName, undefined) {\r\n  'use strict';\r\n\r\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\r\nvar TEST_ELEMENT = document.createElement('div');\r\n\r\nvar TYPE_FUNCTION = 'function';\r\n\r\nvar round = Math.round;\r\nvar abs = Math.abs;\r\nvar now = Date.now;\r\n\r\n/**\r\n * set a timeout with a given scope\r\n * @param {Function} fn\r\n * @param {Number} timeout\r\n * @param {Object} context\r\n * @returns {number}\r\n */\r\nfunction setTimeoutContext(fn, timeout, context) {\r\n    return setTimeout(bindFn(fn, context), timeout);\r\n}\r\n\r\n/**\r\n * if the argument is an array, we want to execute the fn on each entry\r\n * if it aint an array we don't want to do a thing.\r\n * this is used by all the methods that accept a single and array argument.\r\n * @param {*|Array} arg\r\n * @param {String} fn\r\n * @param {Object} [context]\r\n * @returns {Boolean}\r\n */\r\nfunction invokeArrayArg(arg, fn, context) {\r\n    if (Array.isArray(arg)) {\r\n        each(arg, context[fn], context);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * walk objects and arrays\r\n * @param {Object} obj\r\n * @param {Function} iterator\r\n * @param {Object} context\r\n */\r\nfunction each(obj, iterator, context) {\r\n    var i;\r\n\r\n    if (!obj) {\r\n        return;\r\n    }\r\n\r\n    if (obj.forEach) {\r\n        obj.forEach(iterator, context);\r\n    } else if (obj.length !== undefined) {\r\n        i = 0;\r\n        while (i < obj.length) {\r\n            iterator.call(context, obj[i], i, obj);\r\n            i++;\r\n        }\r\n    } else {\r\n        for (i in obj) {\r\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * wrap a method with a deprecation warning and stack trace\r\n * @param {Function} method\r\n * @param {String} name\r\n * @param {String} message\r\n * @returns {Function} A new function wrapping the supplied method.\r\n */\r\nfunction deprecate(method, name, message) {\r\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\r\n    return function() {\r\n        var e = new Error('get-stack-trace');\r\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\r\n            .replace(/^\\s+at\\s+/gm, '')\r\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\r\n\r\n        var log = window.console && (window.console.warn || window.console.log);\r\n        if (log) {\r\n            log.call(window.console, deprecationMessage, stack);\r\n        }\r\n        return method.apply(this, arguments);\r\n    };\r\n}\r\n\r\n/**\r\n * extend object.\r\n * means that properties in dest will be overwritten by the ones in src.\r\n * @param {Object} target\r\n * @param {...Object} objects_to_assign\r\n * @returns {Object} target\r\n */\r\nvar assign;\r\nif (typeof Object.assign !== 'function') {\r\n    assign = function assign(target) {\r\n        if (target === undefined || target === null) {\r\n            throw new TypeError('Cannot convert undefined or null to object');\r\n        }\r\n\r\n        var output = Object(target);\r\n        for (var index = 1; index < arguments.length; index++) {\r\n            var source = arguments[index];\r\n            if (source !== undefined && source !== null) {\r\n                for (var nextKey in source) {\r\n                    if (source.hasOwnProperty(nextKey)) {\r\n                        output[nextKey] = source[nextKey];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    };\r\n} else {\r\n    assign = Object.assign;\r\n}\r\n\r\n/**\r\n * extend object.\r\n * means that properties in dest will be overwritten by the ones in src.\r\n * @param {Object} dest\r\n * @param {Object} src\r\n * @param {Boolean} [merge=false]\r\n * @returns {Object} dest\r\n */\r\nvar extend = deprecate(function extend(dest, src, merge) {\r\n    var keys = Object.keys(src);\r\n    var i = 0;\r\n    while (i < keys.length) {\r\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\r\n            dest[keys[i]] = src[keys[i]];\r\n        }\r\n        i++;\r\n    }\r\n    return dest;\r\n}, 'extend', 'Use `assign`.');\r\n\r\n/**\r\n * merge the values from src in the dest.\r\n * means that properties that exist in dest will not be overwritten by src\r\n * @param {Object} dest\r\n * @param {Object} src\r\n * @returns {Object} dest\r\n */\r\nvar merge = deprecate(function merge(dest, src) {\r\n    return extend(dest, src, true);\r\n}, 'merge', 'Use `assign`.');\r\n\r\n/**\r\n * simple class inheritance\r\n * @param {Function} child\r\n * @param {Function} base\r\n * @param {Object} [properties]\r\n */\r\nfunction inherit(child, base, properties) {\r\n    var baseP = base.prototype,\r\n        childP;\r\n\r\n    childP = child.prototype = Object.create(baseP);\r\n    childP.constructor = child;\r\n    childP._super = baseP;\r\n\r\n    if (properties) {\r\n        assign(childP, properties);\r\n    }\r\n}\r\n\r\n/**\r\n * simple function bind\r\n * @param {Function} fn\r\n * @param {Object} context\r\n * @returns {Function}\r\n */\r\nfunction bindFn(fn, context) {\r\n    return function boundFn() {\r\n        return fn.apply(context, arguments);\r\n    };\r\n}\r\n\r\n/**\r\n * let a boolean value also be a function that must return a boolean\r\n * this first item in args will be used as the context\r\n * @param {Boolean|Function} val\r\n * @param {Array} [args]\r\n * @returns {Boolean}\r\n */\r\nfunction boolOrFn(val, args) {\r\n    if (typeof val == TYPE_FUNCTION) {\r\n        return val.apply(args ? args[0] || undefined : undefined, args);\r\n    }\r\n    return val;\r\n}\r\n\r\n/**\r\n * use the val2 when val1 is undefined\r\n * @param {*} val1\r\n * @param {*} val2\r\n * @returns {*}\r\n */\r\nfunction ifUndefined(val1, val2) {\r\n    return (val1 === undefined) ? val2 : val1;\r\n}\r\n\r\n/**\r\n * addEventListener with multiple events at once\r\n * @param {EventTarget} target\r\n * @param {String} types\r\n * @param {Function} handler\r\n */\r\nfunction addEventListeners(target, types, handler) {\r\n    each(splitStr(types), function(type) {\r\n        target.addEventListener(type, handler, false);\r\n    });\r\n}\r\n\r\n/**\r\n * removeEventListener with multiple events at once\r\n * @param {EventTarget} target\r\n * @param {String} types\r\n * @param {Function} handler\r\n */\r\nfunction removeEventListeners(target, types, handler) {\r\n    each(splitStr(types), function(type) {\r\n        target.removeEventListener(type, handler, false);\r\n    });\r\n}\r\n\r\n/**\r\n * find if a node is in the given parent\r\n * @method hasParent\r\n * @param {HTMLElement} node\r\n * @param {HTMLElement} parent\r\n * @return {Boolean} found\r\n */\r\nfunction hasParent(node, parent) {\r\n    while (node) {\r\n        if (node == parent) {\r\n            return true;\r\n        }\r\n        node = node.parentNode;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * small indexOf wrapper\r\n * @param {String} str\r\n * @param {String} find\r\n * @returns {Boolean} found\r\n */\r\nfunction inStr(str, find) {\r\n    return str.indexOf(find) > -1;\r\n}\r\n\r\n/**\r\n * split string on whitespace\r\n * @param {String} str\r\n * @returns {Array} words\r\n */\r\nfunction splitStr(str) {\r\n    return str.trim().split(/\\s+/g);\r\n}\r\n\r\n/**\r\n * find if a array contains the object using indexOf or a simple polyFill\r\n * @param {Array} src\r\n * @param {String} find\r\n * @param {String} [findByKey]\r\n * @return {Boolean|Number} false when not found, or the index\r\n */\r\nfunction inArray(src, find, findByKey) {\r\n    if (src.indexOf && !findByKey) {\r\n        return src.indexOf(find);\r\n    } else {\r\n        var i = 0;\r\n        while (i < src.length) {\r\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\r\n                return i;\r\n            }\r\n            i++;\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n\r\n/**\r\n * convert array-like objects to real arrays\r\n * @param {Object} obj\r\n * @returns {Array}\r\n */\r\nfunction toArray(obj) {\r\n    return Array.prototype.slice.call(obj, 0);\r\n}\r\n\r\n/**\r\n * unique array with objects based on a key (like 'id') or just by the array's value\r\n * @param {Array} src [{id:1},{id:2},{id:1}]\r\n * @param {String} [key]\r\n * @param {Boolean} [sort=False]\r\n * @returns {Array} [{id:1},{id:2}]\r\n */\r\nfunction uniqueArray(src, key, sort) {\r\n    var results = [];\r\n    var values = [];\r\n    var i = 0;\r\n\r\n    while (i < src.length) {\r\n        var val = key ? src[i][key] : src[i];\r\n        if (inArray(values, val) < 0) {\r\n            results.push(src[i]);\r\n        }\r\n        values[i] = val;\r\n        i++;\r\n    }\r\n\r\n    if (sort) {\r\n        if (!key) {\r\n            results = results.sort();\r\n        } else {\r\n            results = results.sort(function sortUniqueArray(a, b) {\r\n                return a[key] > b[key];\r\n            });\r\n        }\r\n    }\r\n\r\n    return results;\r\n}\r\n\r\n/**\r\n * get the prefixed property\r\n * @param {Object} obj\r\n * @param {String} property\r\n * @returns {String|Undefined} prefixed\r\n */\r\nfunction prefixed(obj, property) {\r\n    var prefix, prop;\r\n    var camelProp = property[0].toUpperCase() + property.slice(1);\r\n\r\n    var i = 0;\r\n    while (i < VENDOR_PREFIXES.length) {\r\n        prefix = VENDOR_PREFIXES[i];\r\n        prop = (prefix) ? prefix + camelProp : property;\r\n\r\n        if (prop in obj) {\r\n            return prop;\r\n        }\r\n        i++;\r\n    }\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * get a unique id\r\n * @returns {number} uniqueId\r\n */\r\nvar _uniqueId = 1;\r\nfunction uniqueId() {\r\n    return _uniqueId++;\r\n}\r\n\r\n/**\r\n * get the window object of an element\r\n * @param {HTMLElement} element\r\n * @returns {DocumentView|Window}\r\n */\r\nfunction getWindowForElement(element) {\r\n    var doc = element.ownerDocument || element;\r\n    return (doc.defaultView || doc.parentWindow || window);\r\n}\r\n\r\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\r\n\r\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\r\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\r\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\r\n\r\nvar INPUT_TYPE_TOUCH = 'touch';\r\nvar INPUT_TYPE_PEN = 'pen';\r\nvar INPUT_TYPE_MOUSE = 'mouse';\r\nvar INPUT_TYPE_KINECT = 'kinect';\r\n\r\nvar COMPUTE_INTERVAL = 25;\r\n\r\nvar INPUT_START = 1;\r\nvar INPUT_MOVE = 2;\r\nvar INPUT_END = 4;\r\nvar INPUT_CANCEL = 8;\r\n\r\nvar DIRECTION_NONE = 1;\r\nvar DIRECTION_LEFT = 2;\r\nvar DIRECTION_RIGHT = 4;\r\nvar DIRECTION_UP = 8;\r\nvar DIRECTION_DOWN = 16;\r\n\r\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\r\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\r\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\r\n\r\nvar PROPS_XY = ['x', 'y'];\r\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\r\n\r\n/**\r\n * create new input type manager\r\n * @param {Manager} manager\r\n * @param {Function} callback\r\n * @returns {Input}\r\n * @constructor\r\n */\r\nfunction Input(manager, callback) {\r\n    var self = this;\r\n    this.manager = manager;\r\n    this.callback = callback;\r\n    this.element = manager.element;\r\n    this.target = manager.options.inputTarget;\r\n\r\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\r\n    // so when disabled the input events are completely bypassed.\r\n    this.domHandler = function(ev) {\r\n        if (boolOrFn(manager.options.enable, [manager])) {\r\n            self.handler(ev);\r\n        }\r\n    };\r\n\r\n    this.init();\r\n\r\n}\r\n\r\nInput.prototype = {\r\n    /**\r\n     * should handle the inputEvent data and trigger the callback\r\n     * @virtual\r\n     */\r\n    handler: function() { },\r\n\r\n    /**\r\n     * bind the events\r\n     */\r\n    init: function() {\r\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\r\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\r\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\r\n    },\r\n\r\n    /**\r\n     * unbind the events\r\n     */\r\n    destroy: function() {\r\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\r\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\r\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\r\n    }\r\n};\r\n\r\n/**\r\n * create new input type manager\r\n * called by the Manager constructor\r\n * @param {Hammer} manager\r\n * @returns {Input}\r\n */\r\nfunction createInputInstance(manager) {\r\n    var Type;\r\n    var inputClass = manager.options.inputClass;\r\n\r\n    if (inputClass) {\r\n        Type = inputClass;\r\n    } else if (SUPPORT_POINTER_EVENTS) {\r\n        Type = PointerEventInput;\r\n    } else if (SUPPORT_ONLY_TOUCH) {\r\n        Type = TouchInput;\r\n    } else if (!SUPPORT_TOUCH) {\r\n        Type = MouseInput;\r\n    } else {\r\n        Type = TouchMouseInput;\r\n    }\r\n    return new (Type)(manager, inputHandler);\r\n}\r\n\r\n/**\r\n * handle input events\r\n * @param {Manager} manager\r\n * @param {String} eventType\r\n * @param {Object} input\r\n */\r\nfunction inputHandler(manager, eventType, input) {\r\n    var pointersLen = input.pointers.length;\r\n    var changedPointersLen = input.changedPointers.length;\r\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\r\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\r\n\r\n    input.isFirst = !!isFirst;\r\n    input.isFinal = !!isFinal;\r\n\r\n    if (isFirst) {\r\n        manager.session = {};\r\n    }\r\n\r\n    // source event is the normalized value of the domEvents\r\n    // like 'touchstart, mouseup, pointerdown'\r\n    input.eventType = eventType;\r\n\r\n    // compute scale, rotation etc\r\n    computeInputData(manager, input);\r\n\r\n    // emit secret event\r\n    manager.emit('hammer.input', input);\r\n\r\n    manager.recognize(input);\r\n    manager.session.prevInput = input;\r\n}\r\n\r\n/**\r\n * extend the data with some usable properties like scale, rotate, velocity etc\r\n * @param {Object} manager\r\n * @param {Object} input\r\n */\r\nfunction computeInputData(manager, input) {\r\n    var session = manager.session;\r\n    var pointers = input.pointers;\r\n    var pointersLength = pointers.length;\r\n\r\n    // store the first input to calculate the distance and direction\r\n    if (!session.firstInput) {\r\n        session.firstInput = simpleCloneInputData(input);\r\n    }\r\n\r\n    // to compute scale and rotation we need to store the multiple touches\r\n    if (pointersLength > 1 && !session.firstMultiple) {\r\n        session.firstMultiple = simpleCloneInputData(input);\r\n    } else if (pointersLength === 1) {\r\n        session.firstMultiple = false;\r\n    }\r\n\r\n    var firstInput = session.firstInput;\r\n    var firstMultiple = session.firstMultiple;\r\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\r\n\r\n    var center = input.center = getCenter(pointers);\r\n    input.timeStamp = now();\r\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\r\n\r\n    input.angle = getAngle(offsetCenter, center);\r\n    input.distance = getDistance(offsetCenter, center);\r\n\r\n    computeDeltaXY(session, input);\r\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\r\n\r\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\r\n    input.overallVelocityX = overallVelocity.x;\r\n    input.overallVelocityY = overallVelocity.y;\r\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\r\n\r\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\r\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\r\n\r\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\r\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\r\n\r\n    computeIntervalInputData(session, input);\r\n\r\n    // find the correct target\r\n    var target = manager.element;\r\n    if (hasParent(input.srcEvent.target, target)) {\r\n        target = input.srcEvent.target;\r\n    }\r\n    input.target = target;\r\n}\r\n\r\nfunction computeDeltaXY(session, input) {\r\n    var center = input.center;\r\n    var offset = session.offsetDelta || {};\r\n    var prevDelta = session.prevDelta || {};\r\n    var prevInput = session.prevInput || {};\r\n\r\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\r\n        prevDelta = session.prevDelta = {\r\n            x: prevInput.deltaX || 0,\r\n            y: prevInput.deltaY || 0\r\n        };\r\n\r\n        offset = session.offsetDelta = {\r\n            x: center.x,\r\n            y: center.y\r\n        };\r\n    }\r\n\r\n    input.deltaX = prevDelta.x + (center.x - offset.x);\r\n    input.deltaY = prevDelta.y + (center.y - offset.y);\r\n}\r\n\r\n/**\r\n * velocity is calculated every x ms\r\n * @param {Object} session\r\n * @param {Object} input\r\n */\r\nfunction computeIntervalInputData(session, input) {\r\n    var last = session.lastInterval || input,\r\n        deltaTime = input.timeStamp - last.timeStamp,\r\n        velocity, velocityX, velocityY, direction;\r\n\r\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\r\n        var deltaX = input.deltaX - last.deltaX;\r\n        var deltaY = input.deltaY - last.deltaY;\r\n\r\n        var v = getVelocity(deltaTime, deltaX, deltaY);\r\n        velocityX = v.x;\r\n        velocityY = v.y;\r\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\r\n        direction = getDirection(deltaX, deltaY);\r\n\r\n        session.lastInterval = input;\r\n    } else {\r\n        // use latest velocity info if it doesn't overtake a minimum period\r\n        velocity = last.velocity;\r\n        velocityX = last.velocityX;\r\n        velocityY = last.velocityY;\r\n        direction = last.direction;\r\n    }\r\n\r\n    input.velocity = velocity;\r\n    input.velocityX = velocityX;\r\n    input.velocityY = velocityY;\r\n    input.direction = direction;\r\n}\r\n\r\n/**\r\n * create a simple clone from the input used for storage of firstInput and firstMultiple\r\n * @param {Object} input\r\n * @returns {Object} clonedInputData\r\n */\r\nfunction simpleCloneInputData(input) {\r\n    // make a simple copy of the pointers because we will get a reference if we don't\r\n    // we only need clientXY for the calculations\r\n    var pointers = [];\r\n    var i = 0;\r\n    while (i < input.pointers.length) {\r\n        pointers[i] = {\r\n            clientX: round(input.pointers[i].clientX),\r\n            clientY: round(input.pointers[i].clientY)\r\n        };\r\n        i++;\r\n    }\r\n\r\n    return {\r\n        timeStamp: now(),\r\n        pointers: pointers,\r\n        center: getCenter(pointers),\r\n        deltaX: input.deltaX,\r\n        deltaY: input.deltaY\r\n    };\r\n}\r\n\r\n/**\r\n * get the center of all the pointers\r\n * @param {Array} pointers\r\n * @return {Object} center contains `x` and `y` properties\r\n */\r\nfunction getCenter(pointers) {\r\n    var pointersLength = pointers.length;\r\n\r\n    // no need to loop when only one touch\r\n    if (pointersLength === 1) {\r\n        return {\r\n            x: round(pointers[0].clientX),\r\n            y: round(pointers[0].clientY)\r\n        };\r\n    }\r\n\r\n    var x = 0, y = 0, i = 0;\r\n    while (i < pointersLength) {\r\n        x += pointers[i].clientX;\r\n        y += pointers[i].clientY;\r\n        i++;\r\n    }\r\n\r\n    return {\r\n        x: round(x / pointersLength),\r\n        y: round(y / pointersLength)\r\n    };\r\n}\r\n\r\n/**\r\n * calculate the velocity between two points. unit is in px per ms.\r\n * @param {Number} deltaTime\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Object} velocity `x` and `y`\r\n */\r\nfunction getVelocity(deltaTime, x, y) {\r\n    return {\r\n        x: x / deltaTime || 0,\r\n        y: y / deltaTime || 0\r\n    };\r\n}\r\n\r\n/**\r\n * get the direction between two points\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Number} direction\r\n */\r\nfunction getDirection(x, y) {\r\n    if (x === y) {\r\n        return DIRECTION_NONE;\r\n    }\r\n\r\n    if (abs(x) >= abs(y)) {\r\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\r\n    }\r\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\r\n}\r\n\r\n/**\r\n * calculate the absolute distance between two points\r\n * @param {Object} p1 {x, y}\r\n * @param {Object} p2 {x, y}\r\n * @param {Array} [props] containing x and y keys\r\n * @return {Number} distance\r\n */\r\nfunction getDistance(p1, p2, props) {\r\n    if (!props) {\r\n        props = PROPS_XY;\r\n    }\r\n    var x = p2[props[0]] - p1[props[0]],\r\n        y = p2[props[1]] - p1[props[1]];\r\n\r\n    return Math.sqrt((x * x) + (y * y));\r\n}\r\n\r\n/**\r\n * calculate the angle between two coordinates\r\n * @param {Object} p1\r\n * @param {Object} p2\r\n * @param {Array} [props] containing x and y keys\r\n * @return {Number} angle\r\n */\r\nfunction getAngle(p1, p2, props) {\r\n    if (!props) {\r\n        props = PROPS_XY;\r\n    }\r\n    var x = p2[props[0]] - p1[props[0]],\r\n        y = p2[props[1]] - p1[props[1]];\r\n    return Math.atan2(y, x) * 180 / Math.PI;\r\n}\r\n\r\n/**\r\n * calculate the rotation degrees between two pointersets\r\n * @param {Array} start array of pointers\r\n * @param {Array} end array of pointers\r\n * @return {Number} rotation\r\n */\r\nfunction getRotation(start, end) {\r\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\r\n}\r\n\r\n/**\r\n * calculate the scale factor between two pointersets\r\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\r\n * @param {Array} start array of pointers\r\n * @param {Array} end array of pointers\r\n * @return {Number} scale\r\n */\r\nfunction getScale(start, end) {\r\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\r\n}\r\n\r\nvar MOUSE_INPUT_MAP = {\r\n    mousedown: INPUT_START,\r\n    mousemove: INPUT_MOVE,\r\n    mouseup: INPUT_END\r\n};\r\n\r\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\r\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\r\n\r\n/**\r\n * Mouse events input\r\n * @constructor\r\n * @extends Input\r\n */\r\nfunction MouseInput() {\r\n    this.evEl = MOUSE_ELEMENT_EVENTS;\r\n    this.evWin = MOUSE_WINDOW_EVENTS;\r\n\r\n    this.pressed = false; // mousedown state\r\n\r\n    Input.apply(this, arguments);\r\n}\r\n\r\ninherit(MouseInput, Input, {\r\n    /**\r\n     * handle mouse events\r\n     * @param {Object} ev\r\n     */\r\n    handler: function MEhandler(ev) {\r\n        var eventType = MOUSE_INPUT_MAP[ev.type];\r\n\r\n        // on start we want to have the left mouse button down\r\n        if (eventType & INPUT_START && ev.button === 0) {\r\n            this.pressed = true;\r\n        }\r\n\r\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\r\n            eventType = INPUT_END;\r\n        }\r\n\r\n        // mouse must be down\r\n        if (!this.pressed) {\r\n            return;\r\n        }\r\n\r\n        if (eventType & INPUT_END) {\r\n            this.pressed = false;\r\n        }\r\n\r\n        this.callback(this.manager, eventType, {\r\n            pointers: [ev],\r\n            changedPointers: [ev],\r\n            pointerType: INPUT_TYPE_MOUSE,\r\n            srcEvent: ev\r\n        });\r\n    }\r\n});\r\n\r\nvar POINTER_INPUT_MAP = {\r\n    pointerdown: INPUT_START,\r\n    pointermove: INPUT_MOVE,\r\n    pointerup: INPUT_END,\r\n    pointercancel: INPUT_CANCEL,\r\n    pointerout: INPUT_CANCEL\r\n};\r\n\r\n// in IE10 the pointer types is defined as an enum\r\nvar IE10_POINTER_TYPE_ENUM = {\r\n    2: INPUT_TYPE_TOUCH,\r\n    3: INPUT_TYPE_PEN,\r\n    4: INPUT_TYPE_MOUSE,\r\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\r\n};\r\n\r\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\r\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\r\n\r\n// IE10 has prefixed support, and case-sensitive\r\nif (window.MSPointerEvent && !window.PointerEvent) {\r\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\r\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\r\n}\r\n\r\n/**\r\n * Pointer events input\r\n * @constructor\r\n * @extends Input\r\n */\r\nfunction PointerEventInput() {\r\n    this.evEl = POINTER_ELEMENT_EVENTS;\r\n    this.evWin = POINTER_WINDOW_EVENTS;\r\n\r\n    Input.apply(this, arguments);\r\n\r\n    this.store = (this.manager.session.pointerEvents = []);\r\n}\r\n\r\ninherit(PointerEventInput, Input, {\r\n    /**\r\n     * handle mouse events\r\n     * @param {Object} ev\r\n     */\r\n    handler: function PEhandler(ev) {\r\n        var store = this.store;\r\n        var removePointer = false;\r\n\r\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\r\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\r\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\r\n\r\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\r\n\r\n        // get index of the event in the store\r\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\r\n\r\n        // start and mouse must be down\r\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\r\n            if (storeIndex < 0) {\r\n                store.push(ev);\r\n                storeIndex = store.length - 1;\r\n            }\r\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\r\n            removePointer = true;\r\n        }\r\n\r\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\r\n        if (storeIndex < 0) {\r\n            return;\r\n        }\r\n\r\n        // update the event in the store\r\n        store[storeIndex] = ev;\r\n\r\n        this.callback(this.manager, eventType, {\r\n            pointers: store,\r\n            changedPointers: [ev],\r\n            pointerType: pointerType,\r\n            srcEvent: ev\r\n        });\r\n\r\n        if (removePointer) {\r\n            // remove from the store\r\n            store.splice(storeIndex, 1);\r\n        }\r\n    }\r\n});\r\n\r\nvar SINGLE_TOUCH_INPUT_MAP = {\r\n    touchstart: INPUT_START,\r\n    touchmove: INPUT_MOVE,\r\n    touchend: INPUT_END,\r\n    touchcancel: INPUT_CANCEL\r\n};\r\n\r\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\r\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\r\n\r\n/**\r\n * Touch events input\r\n * @constructor\r\n * @extends Input\r\n */\r\nfunction SingleTouchInput() {\r\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\r\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\r\n    this.started = false;\r\n\r\n    Input.apply(this, arguments);\r\n}\r\n\r\ninherit(SingleTouchInput, Input, {\r\n    handler: function TEhandler(ev) {\r\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\r\n\r\n        // should we handle the touch events?\r\n        if (type === INPUT_START) {\r\n            this.started = true;\r\n        }\r\n\r\n        if (!this.started) {\r\n            return;\r\n        }\r\n\r\n        var touches = normalizeSingleTouches.call(this, ev, type);\r\n\r\n        // when done, reset the started state\r\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\r\n            this.started = false;\r\n        }\r\n\r\n        this.callback(this.manager, type, {\r\n            pointers: touches[0],\r\n            changedPointers: touches[1],\r\n            pointerType: INPUT_TYPE_TOUCH,\r\n            srcEvent: ev\r\n        });\r\n    }\r\n});\r\n\r\n/**\r\n * @this {TouchInput}\r\n * @param {Object} ev\r\n * @param {Number} type flag\r\n * @returns {undefined|Array} [all, changed]\r\n */\r\nfunction normalizeSingleTouches(ev, type) {\r\n    var all = toArray(ev.touches);\r\n    var changed = toArray(ev.changedTouches);\r\n\r\n    if (type & (INPUT_END | INPUT_CANCEL)) {\r\n        all = uniqueArray(all.concat(changed), 'identifier', true);\r\n    }\r\n\r\n    return [all, changed];\r\n}\r\n\r\nvar TOUCH_INPUT_MAP = {\r\n    touchstart: INPUT_START,\r\n    touchmove: INPUT_MOVE,\r\n    touchend: INPUT_END,\r\n    touchcancel: INPUT_CANCEL\r\n};\r\n\r\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\r\n\r\n/**\r\n * Multi-user touch events input\r\n * @constructor\r\n * @extends Input\r\n */\r\nfunction TouchInput() {\r\n    this.evTarget = TOUCH_TARGET_EVENTS;\r\n    this.targetIds = {};\r\n\r\n    Input.apply(this, arguments);\r\n}\r\n\r\ninherit(TouchInput, Input, {\r\n    handler: function MTEhandler(ev) {\r\n        var type = TOUCH_INPUT_MAP[ev.type];\r\n        var touches = getTouches.call(this, ev, type);\r\n        if (!touches) {\r\n            return;\r\n        }\r\n\r\n        this.callback(this.manager, type, {\r\n            pointers: touches[0],\r\n            changedPointers: touches[1],\r\n            pointerType: INPUT_TYPE_TOUCH,\r\n            srcEvent: ev\r\n        });\r\n    }\r\n});\r\n\r\n/**\r\n * @this {TouchInput}\r\n * @param {Object} ev\r\n * @param {Number} type flag\r\n * @returns {undefined|Array} [all, changed]\r\n */\r\nfunction getTouches(ev, type) {\r\n    var allTouches = toArray(ev.touches);\r\n    var targetIds = this.targetIds;\r\n\r\n    // when there is only one touch, the process can be simplified\r\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\r\n        targetIds[allTouches[0].identifier] = true;\r\n        return [allTouches, allTouches];\r\n    }\r\n\r\n    var i,\r\n        targetTouches,\r\n        changedTouches = toArray(ev.changedTouches),\r\n        changedTargetTouches = [],\r\n        target = this.target;\r\n\r\n    // get target touches from touches\r\n    targetTouches = allTouches.filter(function(touch) {\r\n        return hasParent(touch.target, target);\r\n    });\r\n\r\n    // collect touches\r\n    if (type === INPUT_START) {\r\n        i = 0;\r\n        while (i < targetTouches.length) {\r\n            targetIds[targetTouches[i].identifier] = true;\r\n            i++;\r\n        }\r\n    }\r\n\r\n    // filter changed touches to only contain touches that exist in the collected target ids\r\n    i = 0;\r\n    while (i < changedTouches.length) {\r\n        if (targetIds[changedTouches[i].identifier]) {\r\n            changedTargetTouches.push(changedTouches[i]);\r\n        }\r\n\r\n        // cleanup removed touches\r\n        if (type & (INPUT_END | INPUT_CANCEL)) {\r\n            delete targetIds[changedTouches[i].identifier];\r\n        }\r\n        i++;\r\n    }\r\n\r\n    if (!changedTargetTouches.length) {\r\n        return;\r\n    }\r\n\r\n    return [\r\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\r\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\r\n        changedTargetTouches\r\n    ];\r\n}\r\n\r\n/**\r\n * Combined touch and mouse input\r\n *\r\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\r\n * This because touch devices also emit mouse events while doing a touch.\r\n *\r\n * @constructor\r\n * @extends Input\r\n */\r\n\r\nvar DEDUP_TIMEOUT = 2500;\r\nvar DEDUP_DISTANCE = 25;\r\n\r\nfunction TouchMouseInput() {\r\n    Input.apply(this, arguments);\r\n\r\n    var handler = bindFn(this.handler, this);\r\n    this.touch = new TouchInput(this.manager, handler);\r\n    this.mouse = new MouseInput(this.manager, handler);\r\n\r\n    this.primaryTouch = null;\r\n    this.lastTouches = [];\r\n}\r\n\r\ninherit(TouchMouseInput, Input, {\r\n    /**\r\n     * handle mouse and touch events\r\n     * @param {Hammer} manager\r\n     * @param {String} inputEvent\r\n     * @param {Object} inputData\r\n     */\r\n    handler: function TMEhandler(manager, inputEvent, inputData) {\r\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\r\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\r\n\r\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\r\n            return;\r\n        }\r\n\r\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\r\n        if (isTouch) {\r\n            recordTouches.call(this, inputEvent, inputData);\r\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\r\n            return;\r\n        }\r\n\r\n        this.callback(manager, inputEvent, inputData);\r\n    },\r\n\r\n    /**\r\n     * remove the event listeners\r\n     */\r\n    destroy: function destroy() {\r\n        this.touch.destroy();\r\n        this.mouse.destroy();\r\n    }\r\n});\r\n\r\nfunction recordTouches(eventType, eventData) {\r\n    if (eventType & INPUT_START) {\r\n        this.primaryTouch = eventData.changedPointers[0].identifier;\r\n        setLastTouch.call(this, eventData);\r\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\r\n        setLastTouch.call(this, eventData);\r\n    }\r\n}\r\n\r\nfunction setLastTouch(eventData) {\r\n    var touch = eventData.changedPointers[0];\r\n\r\n    if (touch.identifier === this.primaryTouch) {\r\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\r\n        this.lastTouches.push(lastTouch);\r\n        var lts = this.lastTouches;\r\n        var removeLastTouch = function() {\r\n            var i = lts.indexOf(lastTouch);\r\n            if (i > -1) {\r\n                lts.splice(i, 1);\r\n            }\r\n        };\r\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\r\n    }\r\n}\r\n\r\nfunction isSyntheticEvent(eventData) {\r\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\r\n    for (var i = 0; i < this.lastTouches.length; i++) {\r\n        var t = this.lastTouches[i];\r\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\r\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\r\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\r\n\r\n// magical touchAction value\r\nvar TOUCH_ACTION_COMPUTE = 'compute';\r\nvar TOUCH_ACTION_AUTO = 'auto';\r\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\r\nvar TOUCH_ACTION_NONE = 'none';\r\nvar TOUCH_ACTION_PAN_X = 'pan-x';\r\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\r\nvar TOUCH_ACTION_MAP = getTouchActionProps();\r\n\r\n/**\r\n * Touch Action\r\n * sets the touchAction property or uses the js alternative\r\n * @param {Manager} manager\r\n * @param {String} value\r\n * @constructor\r\n */\r\nfunction TouchAction(manager, value) {\r\n    this.manager = manager;\r\n    this.set(value);\r\n}\r\n\r\nTouchAction.prototype = {\r\n    /**\r\n     * set the touchAction value on the element or enable the polyfill\r\n     * @param {String} value\r\n     */\r\n    set: function(value) {\r\n        // find out the touch-action by the event handlers\r\n        if (value == TOUCH_ACTION_COMPUTE) {\r\n            value = this.compute();\r\n        }\r\n\r\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\r\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\r\n        }\r\n        this.actions = value.toLowerCase().trim();\r\n    },\r\n\r\n    /**\r\n     * just re-set the touchAction value\r\n     */\r\n    update: function() {\r\n        this.set(this.manager.options.touchAction);\r\n    },\r\n\r\n    /**\r\n     * compute the value for the touchAction property based on the recognizer's settings\r\n     * @returns {String} value\r\n     */\r\n    compute: function() {\r\n        var actions = [];\r\n        each(this.manager.recognizers, function(recognizer) {\r\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\r\n                actions = actions.concat(recognizer.getTouchAction());\r\n            }\r\n        });\r\n        return cleanTouchActions(actions.join(' '));\r\n    },\r\n\r\n    /**\r\n     * this method is called on each input cycle and provides the preventing of the browser behavior\r\n     * @param {Object} input\r\n     */\r\n    preventDefaults: function(input) {\r\n        var srcEvent = input.srcEvent;\r\n        var direction = input.offsetDirection;\r\n\r\n        // if the touch action did prevented once this session\r\n        if (this.manager.session.prevented) {\r\n            srcEvent.preventDefault();\r\n            return;\r\n        }\r\n\r\n        var actions = this.actions;\r\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\r\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\r\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\r\n\r\n        if (hasNone) {\r\n            //do not prevent defaults if this is a tap gesture\r\n\r\n            var isTapPointer = input.pointers.length === 1;\r\n            var isTapMovement = input.distance < 2;\r\n            var isTapTouchTime = input.deltaTime < 250;\r\n\r\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (hasPanX && hasPanY) {\r\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\r\n            return;\r\n        }\r\n\r\n        if (hasNone ||\r\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\r\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\r\n            return this.preventSrc(srcEvent);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\r\n     * @param {Object} srcEvent\r\n     */\r\n    preventSrc: function(srcEvent) {\r\n        this.manager.session.prevented = true;\r\n        srcEvent.preventDefault();\r\n    }\r\n};\r\n\r\n/**\r\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\r\n * @param {String} actions\r\n * @returns {*}\r\n */\r\nfunction cleanTouchActions(actions) {\r\n    // none\r\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\r\n        return TOUCH_ACTION_NONE;\r\n    }\r\n\r\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\r\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\r\n\r\n    // if both pan-x and pan-y are set (different recognizers\r\n    // for different directions, e.g. horizontal pan but vertical swipe?)\r\n    // we need none (as otherwise with pan-x pan-y combined none of these\r\n    // recognizers will work, since the browser would handle all panning\r\n    if (hasPanX && hasPanY) {\r\n        return TOUCH_ACTION_NONE;\r\n    }\r\n\r\n    // pan-x OR pan-y\r\n    if (hasPanX || hasPanY) {\r\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\r\n    }\r\n\r\n    // manipulation\r\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\r\n        return TOUCH_ACTION_MANIPULATION;\r\n    }\r\n\r\n    return TOUCH_ACTION_AUTO;\r\n}\r\n\r\nfunction getTouchActionProps() {\r\n    if (!NATIVE_TOUCH_ACTION) {\r\n        return false;\r\n    }\r\n    var touchMap = {};\r\n    var cssSupports = window.CSS && window.CSS.supports;\r\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\r\n\r\n        // If css.supports is not supported but there is native touch-action assume it supports\r\n        // all values. This is the case for IE 10 and 11.\r\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\r\n    });\r\n    return touchMap;\r\n}\r\n\r\n/**\r\n * Recognizer flow explained; *\r\n * All recognizers have the initial state of POSSIBLE when a input session starts.\r\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\r\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\r\n *\r\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\r\n * which determines with state it should be.\r\n *\r\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\r\n * POSSIBLE to give it another change on the next cycle.\r\n *\r\n *               Possible\r\n *                  |\r\n *            +-----+---------------+\r\n *            |                     |\r\n *      +-----+-----+               |\r\n *      |           |               |\r\n *   Failed      Cancelled          |\r\n *                          +-------+------+\r\n *                          |              |\r\n *                      Recognized       Began\r\n *                                         |\r\n *                                      Changed\r\n *                                         |\r\n *                                  Ended/Recognized\r\n */\r\nvar STATE_POSSIBLE = 1;\r\nvar STATE_BEGAN = 2;\r\nvar STATE_CHANGED = 4;\r\nvar STATE_ENDED = 8;\r\nvar STATE_RECOGNIZED = STATE_ENDED;\r\nvar STATE_CANCELLED = 16;\r\nvar STATE_FAILED = 32;\r\n\r\n/**\r\n * Recognizer\r\n * Every recognizer needs to extend from this class.\r\n * @constructor\r\n * @param {Object} options\r\n */\r\nfunction Recognizer(options) {\r\n    this.options = assign({}, this.defaults, options || {});\r\n\r\n    this.id = uniqueId();\r\n\r\n    this.manager = null;\r\n\r\n    // default is enable true\r\n    this.options.enable = ifUndefined(this.options.enable, true);\r\n\r\n    this.state = STATE_POSSIBLE;\r\n\r\n    this.simultaneous = {};\r\n    this.requireFail = [];\r\n}\r\n\r\nRecognizer.prototype = {\r\n    /**\r\n     * @virtual\r\n     * @type {Object}\r\n     */\r\n    defaults: {},\r\n\r\n    /**\r\n     * set options\r\n     * @param {Object} options\r\n     * @return {Recognizer}\r\n     */\r\n    set: function(options) {\r\n        assign(this.options, options);\r\n\r\n        // also update the touchAction, in case something changed about the directions/enabled state\r\n        this.manager && this.manager.touchAction.update();\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * recognize simultaneous with an other recognizer.\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\r\n    recognizeWith: function(otherRecognizer) {\r\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\r\n            return this;\r\n        }\r\n\r\n        var simultaneous = this.simultaneous;\r\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n        if (!simultaneous[otherRecognizer.id]) {\r\n            simultaneous[otherRecognizer.id] = otherRecognizer;\r\n            otherRecognizer.recognizeWith(this);\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\r\n    dropRecognizeWith: function(otherRecognizer) {\r\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\r\n            return this;\r\n        }\r\n\r\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n        delete this.simultaneous[otherRecognizer.id];\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * recognizer can only run when an other is failing\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\r\n    requireFailure: function(otherRecognizer) {\r\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\r\n            return this;\r\n        }\r\n\r\n        var requireFail = this.requireFail;\r\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n        if (inArray(requireFail, otherRecognizer) === -1) {\r\n            requireFail.push(otherRecognizer);\r\n            otherRecognizer.requireFailure(this);\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Recognizer} this\r\n     */\r\n    dropRequireFailure: function(otherRecognizer) {\r\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\r\n            return this;\r\n        }\r\n\r\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\r\n        var index = inArray(this.requireFail, otherRecognizer);\r\n        if (index > -1) {\r\n            this.requireFail.splice(index, 1);\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * has require failures boolean\r\n     * @returns {boolean}\r\n     */\r\n    hasRequireFailures: function() {\r\n        return this.requireFail.length > 0;\r\n    },\r\n\r\n    /**\r\n     * if the recognizer can recognize simultaneous with an other recognizer\r\n     * @param {Recognizer} otherRecognizer\r\n     * @returns {Boolean}\r\n     */\r\n    canRecognizeWith: function(otherRecognizer) {\r\n        return !!this.simultaneous[otherRecognizer.id];\r\n    },\r\n\r\n    /**\r\n     * You should use `tryEmit` instead of `emit` directly to check\r\n     * that all the needed recognizers has failed before emitting.\r\n     * @param {Object} input\r\n     */\r\n    emit: function(input) {\r\n        var self = this;\r\n        var state = this.state;\r\n\r\n        function emit(event) {\r\n            self.manager.emit(event, input);\r\n        }\r\n\r\n        // 'panstart' and 'panmove'\r\n        if (state < STATE_ENDED) {\r\n            emit(self.options.event + stateStr(state));\r\n        }\r\n\r\n        emit(self.options.event); // simple 'eventName' events\r\n\r\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\r\n            emit(input.additionalEvent);\r\n        }\r\n\r\n        // panend and pancancel\r\n        if (state >= STATE_ENDED) {\r\n            emit(self.options.event + stateStr(state));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Check that all the require failure recognizers has failed,\r\n     * if true, it emits a gesture event,\r\n     * otherwise, setup the state to FAILED.\r\n     * @param {Object} input\r\n     */\r\n    tryEmit: function(input) {\r\n        if (this.canEmit()) {\r\n            return this.emit(input);\r\n        }\r\n        // it's failing anyway\r\n        this.state = STATE_FAILED;\r\n    },\r\n\r\n    /**\r\n     * can we emit?\r\n     * @returns {boolean}\r\n     */\r\n    canEmit: function() {\r\n        var i = 0;\r\n        while (i < this.requireFail.length) {\r\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\r\n                return false;\r\n            }\r\n            i++;\r\n        }\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * update the recognizer\r\n     * @param {Object} inputData\r\n     */\r\n    recognize: function(inputData) {\r\n        // make a new copy of the inputData\r\n        // so we can change the inputData without messing up the other recognizers\r\n        var inputDataClone = assign({}, inputData);\r\n\r\n        // is is enabled and allow recognizing?\r\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\r\n            this.reset();\r\n            this.state = STATE_FAILED;\r\n            return;\r\n        }\r\n\r\n        // reset when we've reached the end\r\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\r\n            this.state = STATE_POSSIBLE;\r\n        }\r\n\r\n        this.state = this.process(inputDataClone);\r\n\r\n        // the recognizer has recognized a gesture\r\n        // so trigger an event\r\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\r\n            this.tryEmit(inputDataClone);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * return the state of the recognizer\r\n     * the actual recognizing happens in this method\r\n     * @virtual\r\n     * @param {Object} inputData\r\n     * @returns {Const} STATE\r\n     */\r\n    process: function(inputData) { }, // jshint ignore:line\r\n\r\n    /**\r\n     * return the preferred touch-action\r\n     * @virtual\r\n     * @returns {Array}\r\n     */\r\n    getTouchAction: function() { },\r\n\r\n    /**\r\n     * called when the gesture isn't allowed to recognize\r\n     * like when another is being recognized or it is disabled\r\n     * @virtual\r\n     */\r\n    reset: function() { }\r\n};\r\n\r\n/**\r\n * get a usable string, used as event postfix\r\n * @param {Const} state\r\n * @returns {String} state\r\n */\r\nfunction stateStr(state) {\r\n    if (state & STATE_CANCELLED) {\r\n        return 'cancel';\r\n    } else if (state & STATE_ENDED) {\r\n        return 'end';\r\n    } else if (state & STATE_CHANGED) {\r\n        return 'move';\r\n    } else if (state & STATE_BEGAN) {\r\n        return 'start';\r\n    }\r\n    return '';\r\n}\r\n\r\n/**\r\n * direction cons to string\r\n * @param {Const} direction\r\n * @returns {String}\r\n */\r\nfunction directionStr(direction) {\r\n    if (direction == DIRECTION_DOWN) {\r\n        return 'down';\r\n    } else if (direction == DIRECTION_UP) {\r\n        return 'up';\r\n    } else if (direction == DIRECTION_LEFT) {\r\n        return 'left';\r\n    } else if (direction == DIRECTION_RIGHT) {\r\n        return 'right';\r\n    }\r\n    return '';\r\n}\r\n\r\n/**\r\n * get a recognizer by name if it is bound to a manager\r\n * @param {Recognizer|String} otherRecognizer\r\n * @param {Recognizer} recognizer\r\n * @returns {Recognizer}\r\n */\r\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\r\n    var manager = recognizer.manager;\r\n    if (manager) {\r\n        return manager.get(otherRecognizer);\r\n    }\r\n    return otherRecognizer;\r\n}\r\n\r\n/**\r\n * This recognizer is just used as a base for the simple attribute recognizers.\r\n * @constructor\r\n * @extends Recognizer\r\n */\r\nfunction AttrRecognizer() {\r\n    Recognizer.apply(this, arguments);\r\n}\r\n\r\ninherit(AttrRecognizer, Recognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof AttrRecognizer\r\n     */\r\n    defaults: {\r\n        /**\r\n         * @type {Number}\r\n         * @default 1\r\n         */\r\n        pointers: 1\r\n    },\r\n\r\n    /**\r\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\r\n     * @memberof AttrRecognizer\r\n     * @param {Object} input\r\n     * @returns {Boolean} recognized\r\n     */\r\n    attrTest: function(input) {\r\n        var optionPointers = this.options.pointers;\r\n        return optionPointers === 0 || input.pointers.length === optionPointers;\r\n    },\r\n\r\n    /**\r\n     * Process the input and return the state for the recognizer\r\n     * @memberof AttrRecognizer\r\n     * @param {Object} input\r\n     * @returns {*} State\r\n     */\r\n    process: function(input) {\r\n        var state = this.state;\r\n        var eventType = input.eventType;\r\n\r\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\r\n        var isValid = this.attrTest(input);\r\n\r\n        // on cancel input and we've recognized before, return STATE_CANCELLED\r\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\r\n            return state | STATE_CANCELLED;\r\n        } else if (isRecognized || isValid) {\r\n            if (eventType & INPUT_END) {\r\n                return state | STATE_ENDED;\r\n            } else if (!(state & STATE_BEGAN)) {\r\n                return STATE_BEGAN;\r\n            }\r\n            return state | STATE_CHANGED;\r\n        }\r\n        return STATE_FAILED;\r\n    }\r\n});\r\n\r\n/**\r\n * Pan\r\n * Recognized when the pointer is down and moved in the allowed direction.\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\nfunction PanRecognizer() {\r\n    AttrRecognizer.apply(this, arguments);\r\n\r\n    this.pX = null;\r\n    this.pY = null;\r\n}\r\n\r\ninherit(PanRecognizer, AttrRecognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof PanRecognizer\r\n     */\r\n    defaults: {\r\n        event: 'pan',\r\n        threshold: 10,\r\n        pointers: 1,\r\n        direction: DIRECTION_ALL\r\n    },\r\n\r\n    getTouchAction: function() {\r\n        var direction = this.options.direction;\r\n        var actions = [];\r\n        if (direction & DIRECTION_HORIZONTAL) {\r\n            actions.push(TOUCH_ACTION_PAN_Y);\r\n        }\r\n        if (direction & DIRECTION_VERTICAL) {\r\n            actions.push(TOUCH_ACTION_PAN_X);\r\n        }\r\n        return actions;\r\n    },\r\n\r\n    directionTest: function(input) {\r\n        var options = this.options;\r\n        var hasMoved = true;\r\n        var distance = input.distance;\r\n        var direction = input.direction;\r\n        var x = input.deltaX;\r\n        var y = input.deltaY;\r\n\r\n        // lock to axis?\r\n        if (!(direction & options.direction)) {\r\n            if (options.direction & DIRECTION_HORIZONTAL) {\r\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\r\n                hasMoved = x != this.pX;\r\n                distance = Math.abs(input.deltaX);\r\n            } else {\r\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\r\n                hasMoved = y != this.pY;\r\n                distance = Math.abs(input.deltaY);\r\n            }\r\n        }\r\n        input.direction = direction;\r\n        return hasMoved && distance > options.threshold && direction & options.direction;\r\n    },\r\n\r\n    attrTest: function(input) {\r\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\r\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\r\n    },\r\n\r\n    emit: function(input) {\r\n\r\n        this.pX = input.deltaX;\r\n        this.pY = input.deltaY;\r\n\r\n        var direction = directionStr(input.direction);\r\n\r\n        if (direction) {\r\n            input.additionalEvent = this.options.event + direction;\r\n        }\r\n        this._super.emit.call(this, input);\r\n    }\r\n});\r\n\r\n/**\r\n * Pinch\r\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\nfunction PinchRecognizer() {\r\n    AttrRecognizer.apply(this, arguments);\r\n}\r\n\r\ninherit(PinchRecognizer, AttrRecognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof PinchRecognizer\r\n     */\r\n    defaults: {\r\n        event: 'pinch',\r\n        threshold: 0,\r\n        pointers: 2\r\n    },\r\n\r\n    getTouchAction: function() {\r\n        return [TOUCH_ACTION_NONE];\r\n    },\r\n\r\n    attrTest: function(input) {\r\n        return this._super.attrTest.call(this, input) &&\r\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\r\n    },\r\n\r\n    emit: function(input) {\r\n        if (input.scale !== 1) {\r\n            var inOut = input.scale < 1 ? 'in' : 'out';\r\n            input.additionalEvent = this.options.event + inOut;\r\n        }\r\n        this._super.emit.call(this, input);\r\n    }\r\n});\r\n\r\n/**\r\n * Press\r\n * Recognized when the pointer is down for x ms without any movement.\r\n * @constructor\r\n * @extends Recognizer\r\n */\r\nfunction PressRecognizer() {\r\n    Recognizer.apply(this, arguments);\r\n\r\n    this._timer = null;\r\n    this._input = null;\r\n}\r\n\r\ninherit(PressRecognizer, Recognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof PressRecognizer\r\n     */\r\n    defaults: {\r\n        event: 'press',\r\n        pointers: 1,\r\n        time: 251, // minimal time of the pointer to be pressed\r\n        threshold: 9 // a minimal movement is ok, but keep it low\r\n    },\r\n\r\n    getTouchAction: function() {\r\n        return [TOUCH_ACTION_AUTO];\r\n    },\r\n\r\n    process: function(input) {\r\n        var options = this.options;\r\n        var validPointers = input.pointers.length === options.pointers;\r\n        var validMovement = input.distance < options.threshold;\r\n        var validTime = input.deltaTime > options.time;\r\n\r\n        this._input = input;\r\n\r\n        // we only allow little movement\r\n        // and we've reached an end event, so a tap is possible\r\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\r\n            this.reset();\r\n        } else if (input.eventType & INPUT_START) {\r\n            this.reset();\r\n            this._timer = setTimeoutContext(function() {\r\n                this.state = STATE_RECOGNIZED;\r\n                this.tryEmit();\r\n            }, options.time, this);\r\n        } else if (input.eventType & INPUT_END) {\r\n            return STATE_RECOGNIZED;\r\n        }\r\n        return STATE_FAILED;\r\n    },\r\n\r\n    reset: function() {\r\n        clearTimeout(this._timer);\r\n    },\r\n\r\n    emit: function(input) {\r\n        if (this.state !== STATE_RECOGNIZED) {\r\n            return;\r\n        }\r\n\r\n        if (input && (input.eventType & INPUT_END)) {\r\n            this.manager.emit(this.options.event + 'up', input);\r\n        } else {\r\n            this._input.timeStamp = now();\r\n            this.manager.emit(this.options.event, this._input);\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Rotate\r\n * Recognized when two or more pointer are moving in a circular motion.\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\nfunction RotateRecognizer() {\r\n    AttrRecognizer.apply(this, arguments);\r\n}\r\n\r\ninherit(RotateRecognizer, AttrRecognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof RotateRecognizer\r\n     */\r\n    defaults: {\r\n        event: 'rotate',\r\n        threshold: 0,\r\n        pointers: 2\r\n    },\r\n\r\n    getTouchAction: function() {\r\n        return [TOUCH_ACTION_NONE];\r\n    },\r\n\r\n    attrTest: function(input) {\r\n        return this._super.attrTest.call(this, input) &&\r\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\r\n    }\r\n});\r\n\r\n/**\r\n * Swipe\r\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\r\n * @constructor\r\n * @extends AttrRecognizer\r\n */\r\nfunction SwipeRecognizer() {\r\n    AttrRecognizer.apply(this, arguments);\r\n}\r\n\r\ninherit(SwipeRecognizer, AttrRecognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof SwipeRecognizer\r\n     */\r\n    defaults: {\r\n        event: 'swipe',\r\n        threshold: 10,\r\n        velocity: 0.3,\r\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\r\n        pointers: 1\r\n    },\r\n\r\n    getTouchAction: function() {\r\n        return PanRecognizer.prototype.getTouchAction.call(this);\r\n    },\r\n\r\n    attrTest: function(input) {\r\n        var direction = this.options.direction;\r\n        var velocity;\r\n\r\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\r\n            velocity = input.overallVelocity;\r\n        } else if (direction & DIRECTION_HORIZONTAL) {\r\n            velocity = input.overallVelocityX;\r\n        } else if (direction & DIRECTION_VERTICAL) {\r\n            velocity = input.overallVelocityY;\r\n        }\r\n\r\n        return this._super.attrTest.call(this, input) &&\r\n            direction & input.offsetDirection &&\r\n            input.distance > this.options.threshold &&\r\n            input.maxPointers == this.options.pointers &&\r\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\r\n    },\r\n\r\n    emit: function(input) {\r\n        var direction = directionStr(input.offsetDirection);\r\n        if (direction) {\r\n            this.manager.emit(this.options.event + direction, input);\r\n        }\r\n\r\n        this.manager.emit(this.options.event, input);\r\n    }\r\n});\r\n\r\n/**\r\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\r\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\r\n * a single tap.\r\n *\r\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\r\n * multi-taps being recognized.\r\n * @constructor\r\n * @extends Recognizer\r\n */\r\nfunction TapRecognizer() {\r\n    Recognizer.apply(this, arguments);\r\n\r\n    // previous time and center,\r\n    // used for tap counting\r\n    this.pTime = false;\r\n    this.pCenter = false;\r\n\r\n    this._timer = null;\r\n    this._input = null;\r\n    this.count = 0;\r\n}\r\n\r\ninherit(TapRecognizer, Recognizer, {\r\n    /**\r\n     * @namespace\r\n     * @memberof PinchRecognizer\r\n     */\r\n    defaults: {\r\n        event: 'tap',\r\n        pointers: 1,\r\n        taps: 1,\r\n        interval: 300, // max time between the multi-tap taps\r\n        time: 250, // max time of the pointer to be down (like finger on the screen)\r\n        threshold: 9, // a minimal movement is ok, but keep it low\r\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\r\n    },\r\n\r\n    getTouchAction: function() {\r\n        return [TOUCH_ACTION_MANIPULATION];\r\n    },\r\n\r\n    process: function(input) {\r\n        var options = this.options;\r\n\r\n        var validPointers = input.pointers.length === options.pointers;\r\n        var validMovement = input.distance < options.threshold;\r\n        var validTouchTime = input.deltaTime < options.time;\r\n\r\n        this.reset();\r\n\r\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\r\n            return this.failTimeout();\r\n        }\r\n\r\n        // we only allow little movement\r\n        // and we've reached an end event, so a tap is possible\r\n        if (validMovement && validTouchTime && validPointers) {\r\n            if (input.eventType != INPUT_END) {\r\n                return this.failTimeout();\r\n            }\r\n\r\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\r\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\r\n\r\n            this.pTime = input.timeStamp;\r\n            this.pCenter = input.center;\r\n\r\n            if (!validMultiTap || !validInterval) {\r\n                this.count = 1;\r\n            } else {\r\n                this.count += 1;\r\n            }\r\n\r\n            this._input = input;\r\n\r\n            // if tap count matches we have recognized it,\r\n            // else it has began recognizing...\r\n            var tapCount = this.count % options.taps;\r\n            if (tapCount === 0) {\r\n                // no failing requirements, immediately trigger the tap event\r\n                // or wait as long as the multitap interval to trigger\r\n                if (!this.hasRequireFailures()) {\r\n                    return STATE_RECOGNIZED;\r\n                } else {\r\n                    this._timer = setTimeoutContext(function() {\r\n                        this.state = STATE_RECOGNIZED;\r\n                        this.tryEmit();\r\n                    }, options.interval, this);\r\n                    return STATE_BEGAN;\r\n                }\r\n            }\r\n        }\r\n        return STATE_FAILED;\r\n    },\r\n\r\n    failTimeout: function() {\r\n        this._timer = setTimeoutContext(function() {\r\n            this.state = STATE_FAILED;\r\n        }, this.options.interval, this);\r\n        return STATE_FAILED;\r\n    },\r\n\r\n    reset: function() {\r\n        clearTimeout(this._timer);\r\n    },\r\n\r\n    emit: function() {\r\n        if (this.state == STATE_RECOGNIZED) {\r\n            this._input.tapCount = this.count;\r\n            this.manager.emit(this.options.event, this._input);\r\n        }\r\n    }\r\n});\r\n\r\n/**\r\n * Simple way to create a manager with a default set of recognizers.\r\n * @param {HTMLElement} element\r\n * @param {Object} [options]\r\n * @constructor\r\n */\r\nfunction Hammer(element, options) {\r\n    options = options || {};\r\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\r\n    return new Manager(element, options);\r\n}\r\n\r\n/**\r\n * @const {string}\r\n */\r\nHammer.VERSION = '2.0.7';\r\n\r\n/**\r\n * default settings\r\n * @namespace\r\n */\r\nHammer.defaults = {\r\n    /**\r\n     * set if DOM events are being triggered.\r\n     * But this is slower and unused by simple implementations, so disabled by default.\r\n     * @type {Boolean}\r\n     * @default false\r\n     */\r\n    domEvents: false,\r\n\r\n    /**\r\n     * The value for the touchAction property/fallback.\r\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\r\n     * @type {String}\r\n     * @default compute\r\n     */\r\n    touchAction: TOUCH_ACTION_COMPUTE,\r\n\r\n    /**\r\n     * @type {Boolean}\r\n     * @default true\r\n     */\r\n    enable: true,\r\n\r\n    /**\r\n     * EXPERIMENTAL FEATURE -- can be removed/changed\r\n     * Change the parent input target element.\r\n     * If Null, then it is being set the to main element.\r\n     * @type {Null|EventTarget}\r\n     * @default null\r\n     */\r\n    inputTarget: null,\r\n\r\n    /**\r\n     * force an input class\r\n     * @type {Null|Function}\r\n     * @default null\r\n     */\r\n    inputClass: null,\r\n\r\n    /**\r\n     * Default recognizer setup when calling `Hammer()`\r\n     * When creating a new Manager these will be skipped.\r\n     * @type {Array}\r\n     */\r\n    preset: [\r\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\r\n        [RotateRecognizer, {enable: false}],\r\n        [PinchRecognizer, {enable: false}, ['rotate']],\r\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\r\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\r\n        [TapRecognizer],\r\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\r\n        [PressRecognizer]\r\n    ],\r\n\r\n    /**\r\n     * Some CSS properties can be used to improve the working of Hammer.\r\n     * Add them to this method and they will be set when creating a new Manager.\r\n     * @namespace\r\n     */\r\n    cssProps: {\r\n        /**\r\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\r\n         * @type {String}\r\n         * @default 'none'\r\n         */\r\n        userSelect: 'none',\r\n\r\n        /**\r\n         * Disable the Windows Phone grippers when pressing an element.\r\n         * @type {String}\r\n         * @default 'none'\r\n         */\r\n        touchSelect: 'none',\r\n\r\n        /**\r\n         * Disables the default callout shown when you touch and hold a touch target.\r\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\r\n         * a callout containing information about the link. This property allows you to disable that callout.\r\n         * @type {String}\r\n         * @default 'none'\r\n         */\r\n        touchCallout: 'none',\r\n\r\n        /**\r\n         * Specifies whether zooming is enabled. Used by IE10>\r\n         * @type {String}\r\n         * @default 'none'\r\n         */\r\n        contentZooming: 'none',\r\n\r\n        /**\r\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\r\n         * @type {String}\r\n         * @default 'none'\r\n         */\r\n        userDrag: 'none',\r\n\r\n        /**\r\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\r\n         * clickable element in iOS. This property obeys the alpha value, if specified.\r\n         * @type {String}\r\n         * @default 'rgba(0,0,0,0)'\r\n         */\r\n        tapHighlightColor: 'rgba(0,0,0,0)'\r\n    }\r\n};\r\n\r\nvar STOP = 1;\r\nvar FORCED_STOP = 2;\r\n\r\n/**\r\n * Manager\r\n * @param {HTMLElement} element\r\n * @param {Object} [options]\r\n * @constructor\r\n */\r\nfunction Manager(element, options) {\r\n    this.options = assign({}, Hammer.defaults, options || {});\r\n\r\n    this.options.inputTarget = this.options.inputTarget || element;\r\n\r\n    this.handlers = {};\r\n    this.session = {};\r\n    this.recognizers = [];\r\n    this.oldCssProps = {};\r\n\r\n    this.element = element;\r\n    this.input = createInputInstance(this);\r\n    this.touchAction = new TouchAction(this, this.options.touchAction);\r\n\r\n    toggleCssProps(this, true);\r\n\r\n    each(this.options.recognizers, function(item) {\r\n        var recognizer = this.add(new (item[0])(item[1]));\r\n        item[2] && recognizer.recognizeWith(item[2]);\r\n        item[3] && recognizer.requireFailure(item[3]);\r\n    }, this);\r\n}\r\n\r\nManager.prototype = {\r\n    /**\r\n     * set options\r\n     * @param {Object} options\r\n     * @returns {Manager}\r\n     */\r\n    set: function(options) {\r\n        assign(this.options, options);\r\n\r\n        // Options that need a little more setup\r\n        if (options.touchAction) {\r\n            this.touchAction.update();\r\n        }\r\n        if (options.inputTarget) {\r\n            // Clean up existing event listeners and reinitialize\r\n            this.input.destroy();\r\n            this.input.target = options.inputTarget;\r\n            this.input.init();\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * stop recognizing for this session.\r\n     * This session will be discarded, when a new [input]start event is fired.\r\n     * When forced, the recognizer cycle is stopped immediately.\r\n     * @param {Boolean} [force]\r\n     */\r\n    stop: function(force) {\r\n        this.session.stopped = force ? FORCED_STOP : STOP;\r\n    },\r\n\r\n    /**\r\n     * run the recognizers!\r\n     * called by the inputHandler function on every movement of the pointers (touches)\r\n     * it walks through all the recognizers and tries to detect the gesture that is being made\r\n     * @param {Object} inputData\r\n     */\r\n    recognize: function(inputData) {\r\n        var session = this.session;\r\n        if (session.stopped) {\r\n            return;\r\n        }\r\n\r\n        // run the touch-action polyfill\r\n        this.touchAction.preventDefaults(inputData);\r\n\r\n        var recognizer;\r\n        var recognizers = this.recognizers;\r\n\r\n        // this holds the recognizer that is being recognized.\r\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\r\n        // if no recognizer is detecting a thing, it is set to `null`\r\n        var curRecognizer = session.curRecognizer;\r\n\r\n        // reset when the last recognizer is recognized\r\n        // or when we're in a new session\r\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\r\n            curRecognizer = session.curRecognizer = null;\r\n        }\r\n\r\n        var i = 0;\r\n        while (i < recognizers.length) {\r\n            recognizer = recognizers[i];\r\n\r\n            // find out if we are allowed try to recognize the input for this one.\r\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\r\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\r\n            //      that is being recognized.\r\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\r\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\r\n            if (session.stopped !== FORCED_STOP && ( // 1\r\n                    !curRecognizer || recognizer == curRecognizer || // 2\r\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\r\n                recognizer.recognize(inputData);\r\n            } else {\r\n                recognizer.reset();\r\n            }\r\n\r\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\r\n            // current active recognizer. but only if we don't already have an active recognizer\r\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\r\n                curRecognizer = session.curRecognizer = recognizer;\r\n            }\r\n            i++;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * get a recognizer by its event name.\r\n     * @param {Recognizer|String} recognizer\r\n     * @returns {Recognizer|Null}\r\n     */\r\n    get: function(recognizer) {\r\n        if (recognizer instanceof Recognizer) {\r\n            return recognizer;\r\n        }\r\n\r\n        var recognizers = this.recognizers;\r\n        for (var i = 0; i < recognizers.length; i++) {\r\n            if (recognizers[i].options.event == recognizer) {\r\n                return recognizers[i];\r\n            }\r\n        }\r\n        return null;\r\n    },\r\n\r\n    /**\r\n     * add a recognizer to the manager\r\n     * existing recognizers with the same event name will be removed\r\n     * @param {Recognizer} recognizer\r\n     * @returns {Recognizer|Manager}\r\n     */\r\n    add: function(recognizer) {\r\n        if (invokeArrayArg(recognizer, 'add', this)) {\r\n            return this;\r\n        }\r\n\r\n        // remove existing\r\n        var existing = this.get(recognizer.options.event);\r\n        if (existing) {\r\n            this.remove(existing);\r\n        }\r\n\r\n        this.recognizers.push(recognizer);\r\n        recognizer.manager = this;\r\n\r\n        this.touchAction.update();\r\n        return recognizer;\r\n    },\r\n\r\n    /**\r\n     * remove a recognizer by name or instance\r\n     * @param {Recognizer|String} recognizer\r\n     * @returns {Manager}\r\n     */\r\n    remove: function(recognizer) {\r\n        if (invokeArrayArg(recognizer, 'remove', this)) {\r\n            return this;\r\n        }\r\n\r\n        recognizer = this.get(recognizer);\r\n\r\n        // let's make sure this recognizer exists\r\n        if (recognizer) {\r\n            var recognizers = this.recognizers;\r\n            var index = inArray(recognizers, recognizer);\r\n\r\n            if (index !== -1) {\r\n                recognizers.splice(index, 1);\r\n                this.touchAction.update();\r\n            }\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * bind event\r\n     * @param {String} events\r\n     * @param {Function} handler\r\n     * @returns {EventEmitter} this\r\n     */\r\n    on: function(events, handler) {\r\n        if (events === undefined) {\r\n            return;\r\n        }\r\n        if (handler === undefined) {\r\n            return;\r\n        }\r\n\r\n        var handlers = this.handlers;\r\n        each(splitStr(events), function(event) {\r\n            handlers[event] = handlers[event] || [];\r\n            handlers[event].push(handler);\r\n        });\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * unbind event, leave emit blank to remove all handlers\r\n     * @param {String} events\r\n     * @param {Function} [handler]\r\n     * @returns {EventEmitter} this\r\n     */\r\n    off: function(events, handler) {\r\n        if (events === undefined) {\r\n            return;\r\n        }\r\n\r\n        var handlers = this.handlers;\r\n        each(splitStr(events), function(event) {\r\n            if (!handler) {\r\n                delete handlers[event];\r\n            } else {\r\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\r\n            }\r\n        });\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * emit event to the listeners\r\n     * @param {String} event\r\n     * @param {Object} data\r\n     */\r\n    emit: function(event, data) {\r\n        // we also want to trigger dom events\r\n        if (this.options.domEvents) {\r\n            triggerDomEvent(event, data);\r\n        }\r\n\r\n        // no handlers, so skip it all\r\n        var handlers = this.handlers[event] && this.handlers[event].slice();\r\n        if (!handlers || !handlers.length) {\r\n            return;\r\n        }\r\n\r\n        data.type = event;\r\n        data.preventDefault = function() {\r\n            data.srcEvent.preventDefault();\r\n        };\r\n\r\n        var i = 0;\r\n        while (i < handlers.length) {\r\n            handlers[i](data);\r\n            i++;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * destroy the manager and unbinds all events\r\n     * it doesn't unbind dom events, that is the user own responsibility\r\n     */\r\n    destroy: function() {\r\n        this.element && toggleCssProps(this, false);\r\n\r\n        this.handlers = {};\r\n        this.session = {};\r\n        this.input.destroy();\r\n        this.element = null;\r\n    }\r\n};\r\n\r\n/**\r\n * add/remove the css properties as defined in manager.options.cssProps\r\n * @param {Manager} manager\r\n * @param {Boolean} add\r\n */\r\nfunction toggleCssProps(manager, add) {\r\n    var element = manager.element;\r\n    if (!element.style) {\r\n        return;\r\n    }\r\n    var prop;\r\n    each(manager.options.cssProps, function(value, name) {\r\n        prop = prefixed(element.style, name);\r\n        if (add) {\r\n            manager.oldCssProps[prop] = element.style[prop];\r\n            element.style[prop] = value;\r\n        } else {\r\n            element.style[prop] = manager.oldCssProps[prop] || '';\r\n        }\r\n    });\r\n    if (!add) {\r\n        manager.oldCssProps = {};\r\n    }\r\n}\r\n\r\n/**\r\n * trigger dom event\r\n * @param {String} event\r\n * @param {Object} data\r\n */\r\nfunction triggerDomEvent(event, data) {\r\n    var gestureEvent = document.createEvent('Event');\r\n    gestureEvent.initEvent(event, true, true);\r\n    gestureEvent.gesture = data;\r\n    data.target.dispatchEvent(gestureEvent);\r\n}\r\n\r\nassign(Hammer, {\r\n    INPUT_START: INPUT_START,\r\n    INPUT_MOVE: INPUT_MOVE,\r\n    INPUT_END: INPUT_END,\r\n    INPUT_CANCEL: INPUT_CANCEL,\r\n\r\n    STATE_POSSIBLE: STATE_POSSIBLE,\r\n    STATE_BEGAN: STATE_BEGAN,\r\n    STATE_CHANGED: STATE_CHANGED,\r\n    STATE_ENDED: STATE_ENDED,\r\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\r\n    STATE_CANCELLED: STATE_CANCELLED,\r\n    STATE_FAILED: STATE_FAILED,\r\n\r\n    DIRECTION_NONE: DIRECTION_NONE,\r\n    DIRECTION_LEFT: DIRECTION_LEFT,\r\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\r\n    DIRECTION_UP: DIRECTION_UP,\r\n    DIRECTION_DOWN: DIRECTION_DOWN,\r\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\r\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\r\n    DIRECTION_ALL: DIRECTION_ALL,\r\n\r\n    Manager: Manager,\r\n    Input: Input,\r\n    TouchAction: TouchAction,\r\n\r\n    TouchInput: TouchInput,\r\n    MouseInput: MouseInput,\r\n    PointerEventInput: PointerEventInput,\r\n    TouchMouseInput: TouchMouseInput,\r\n    SingleTouchInput: SingleTouchInput,\r\n\r\n    Recognizer: Recognizer,\r\n    AttrRecognizer: AttrRecognizer,\r\n    Tap: TapRecognizer,\r\n    Pan: PanRecognizer,\r\n    Swipe: SwipeRecognizer,\r\n    Pinch: PinchRecognizer,\r\n    Rotate: RotateRecognizer,\r\n    Press: PressRecognizer,\r\n\r\n    on: addEventListeners,\r\n    off: removeEventListeners,\r\n    each: each,\r\n    merge: merge,\r\n    extend: extend,\r\n    assign: assign,\r\n    inherit: inherit,\r\n    bindFn: bindFn,\r\n    prefixed: prefixed\r\n});\r\n\r\n// this prevents errors when Hammer is loaded in the presence of an AMD\r\n//  style loader but by script tag, not by the loader.\r\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\r\nfreeGlobal.Hammer = Hammer;\r\n\r\nif (typeof define === 'function' && define.amd) {\r\n    define(function() {\r\n        return Hammer;\r\n    });\r\n} else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = Hammer;\r\n} else {\r\n    window[exportName] = Hammer;\r\n}\r\n\r\n})(window, document, 'Hammer');\r\n"]},"metadata":{},"sourceType":"script"}